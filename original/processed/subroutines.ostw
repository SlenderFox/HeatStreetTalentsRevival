import "globalvars.ostw";
import "playervars.ostw";

globalvar Boolean gMutHeartBurn; // Unused
globalvar Number[] gCurrentPerksHudsList;
globalvar Number[] gSpawnNearestNodeIdxList;
globalvar Vector[] gSpawnPosList;
globalvar Vector gBuyMenuBasePos;

# main(1) team1(1)
void update_combatants() "Subroutine: Update Combatants"
{
	gCombatants = FilteredArray(AllPlayers(Team.Team1), ArrayElement().pIsCombatant);
}

# bots(1) domination(2) highvaluetarget(1) invasion(1) subroutines(1)
void play_incoming_sound_twice() "Subroutine: Play Incoming Sound Twice"
{
	ModifyTeamScore(Team.Team1, 1);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	ModifyTeamScore(Team.Team1, 1);
}

void create_perk_text(in String text, in Boolean perk)
{
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		text,
		gTemp2,
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndColor,
		perk ? Color.Gray : Color.LimeGreen,
		Spectators.DefaultVisibility
	);
}

# debug(1) main(2)
void set_random_perks() "Subroutine: Set Random Perks"
{
	if (CountOf(gCurrentPerksHudsList))
	{
		DestroyInWorldText(gCurrentPerksHudsList[0]);
		DestroyInWorldText(gCurrentPerksHudsList[1]);
	}
	gCurrentPerksHudsList = [];
	if (gWaveNumber % 4 == 1)
	{
		gCurrentPerks = [12, 13];
		gCurrentPerksHudsList.ModAppend(CreateInWorldText(
			gCombatants.Filter(p => p.pInBuyMenu),
			"Hero Talent 1\n      $1600",
			gBuyMenuBasePos - (2.5 * gBuyMenuLeftUpForward[1]) - (112.5 * gBuyMenuLeftUpForward[0]),
			2.5,
			Clipping.DoNotClip,
			InworldTextRev.VisibleToStringAndColor,
			LocalPlayer().pTalent1
				? Color.Gray
				: Color.Purple,
			Spectators.DefaultVisibility
		));
		gCurrentPerksHudsList.ModAppend(CreateInWorldText(
			gCombatants.Filter(p => p.pInBuyMenu),
			"Hero Talent 2\n      $1600",
			gBuyMenuBasePos - (25 * gBuyMenuLeftUpForward[1]) - (112.5 * gBuyMenuLeftUpForward[0]),
			2.5,
			Clipping.DoNotClip,
			InworldTextRev.VisibleToStringAndColor,
			LocalPlayer().pTalent2
				? Color.Gray
				: Color.Purple,
			Spectators.DefaultVisibility
		));
	}
	else
	{
		gCurrentPerks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].Remove(gCurrentPerks).Randomize().Slice(0, 2);
		for (gIterator = 0; 2; 1)
		{
			//> Arithmetic
			gTemp2 = gBuyMenuBasePos - (gIterator ? 25 : 2.5) * gBuyMenuLeftUpForward[1] - 112.5 * gBuyMenuLeftUpForward[0];
			switch (gCurrentPerks[gIterator])
			{
			case 0:
				create_perk_text("Mystery Swap\n     $500", LocalPlayer().pPerkMysterySwap);
				break;
			case 1:
				create_perk_text("Bulletstorm\n   $1000", LocalPlayer().pPerkBulletStorm);
				break;
			case 2:
				create_perk_text("Die Hard\n $700", LocalPlayer().pPerkDieHard);
				break;
			case 3:
				create_perk_text("Brass Knuckles\n     $700", LocalPlayer().pPerkBrassKnuckles);
				break;
			case 4:
				create_perk_text("Vampiric\n   $1000", LocalPlayer().pPerkVampiric);
				break;
			case 5:
				create_perk_text("Crash N' Dash\n      $700", LocalPlayer().pPerkCrashNDash);
				break;
			case 6:
				create_perk_text("Golden Hour\n    $1000", LocalPlayer().pPerkGoldenHour);
				break;
			case 7:
				create_perk_text("Supercharge\n        $700", LocalPlayer().pPerkSuperCharge);
				break;
			case 8:
				create_perk_text("Nemesis\n   $800", LocalPlayer().pPerkNemesis);
				break;
			case 9:
				create_perk_text("Spec Ops\n $600", LocalPlayer().pPerkSpecialOperator);
				break;
			case 10:
				create_perk_text("Sharpshooter\n   $900", LocalPlayer().pPerkSharpShooter);
				break;
			case 11:
				create_perk_text("Shockproof\n        $700", LocalPlayer().pPerkShockProof);
				break;
			}
			gCurrentPerksHudsList.ModAppend(LastTextID());
		}
	}
}

// Doesn't play a sound lmao
# perks(1) team1(27)
void update_ab_string_and_play_sound() "Subroutine: Update Ability String and Play Sound"
{
	# Slice to remove the preceeding newline
	pAbBoughtAbilitiesString = "{0}{1}{2}".Format([
		"{0}{1}{2}".Format([
			"{0}{1}{2}".Format([
				["", "\nPriority A", "\nPriority B", "\nPriority C"][pAbPriority],
				["", "\nHeadhunter I", "\nHeadhunter II"][pAbHeadhunter],
				["", "\nAntigens I", "\nAntigens II"][pAbAntigens]
			]),
			"{0}{1}{2}".Format([
				["", "\nQuick Fix I", "\nQuick Fix II"][pAbQuickFix],
				["", "\nCharged I", "\nCharged II"][pAbCharged],
				["", "\nHaste I", "\nHaste II"][pAbHaste]
			]),
			"{0}{1}{2}".Format([
				["", "\nHeavy Impact I", "\nHeavy Impact II"][pAbHeavyImpact],
				["", "\nSecond Wind I", "\nSecond Wind II"][pAbSecondWind],
				["", "\nTriage I", "\nTriage II"][pAbTriage]
			])
		]),
		"{0}{1}{2}".Format([
			"{0}{1}{2}".Format([
				["", "\nResilience I", "\nResilience II"][pAbResilience],
				pPerkMysterySwap ? "\nMystery Swap" : "",
				pPerkBulletStorm ? "\nBulletstorm" : ""
			]),
			"{0}{1}{2}".Format([
				pPerkDieHard ? "\nDie Hard" : "",
				pPerkBrassKnuckles ? "\nBrass Knuckles" : "",
				pPerkVampiric ? "\nVampiric" : ""
			]),
			"{0}{1}{2}".Format([
				pPerkCrashNDash ? "\nCrash N' Dash" : "",
				pPerkGoldenHour ? "\nGolden Hour" : "",
				pPerkSuperCharge ? "\nSupercharge" : ""
			])
		]),
		"{0}{1}{2}".Format([
			"{0}{1}{2}".Format([
				pPerkNemesis ? "\nNemesis" : "",
				pPerkSpecialOperator ? "\nSpec Ops" : "",
				pPerkSharpShooter ? "\nSharpshooter" : ""
			]),
			"{0}{1}{2}".Format([
				pPerkShockProof ? "\nShockproof" : "",
				pAbHealthBonus ? "\n+{0}% Health".Format([pAbHealthBonus]) : "",
				pAbDamageBonus ? "\n+{0}% Damage".Format([pAbDamageBonus]) : ""
			]),
			pAbHealingBonus ? "\n+{0}% Healing".Format([pAbHealingBonus]) : ""
		])
	]).Slice(1, 511);
}

# bots(1) team1(2)
void nwp_teleport() "Subroutine: Nearest Walkable Position Teleport"
{
	if (gTemp1 == [])
	{
		Teleport(EventPlayer(), SortedArray(gNodes, DistanceBetween(EventPlayer(), ArrayElement()))[0]);
	}
	else
	{
		Teleport(EventPlayer(), gTemp1);
	}
}

# bots(1) domination(1) highvaluetarget(1) subroutines(1)
void call_reinforcements() "Subroutine: Spawn Reinforcements"
{
	gSpecialSpawnsCount += gIsApocalyptic + (gWaveNumber >= 5 ? 2 : 1);
}

# bots(2) pathing(1)
void teleport_to_free_spawn() "Subroutine: Teleport to free Spawn"
{
	if (gGamemode == 0 && (pBaseTier == -1 || gSpecialSpawnsCount > 0) && !pIsAlive)
	{
		pIsNavReachableNode = false;
		if (pBaseTier == -1 && gObjectivePhaseNumber == 0)
		{
			Teleport(EventPlayer(), 100 * Up());
		}
		else
		{
			Teleport(EventPlayer(), gIvDomObjectivePos + Up());
		}
	}
	else if (gGamemode == 1 && gHvtCallReinforcementsEndT >= TotalTimeElapsed() && gSpecialSpawnsCount > 0 && !pIsAlive)
	{
		pIsNavReachableNode = false;
		Teleport(EventPlayer(), PlayersInSlot(1, Team.Team2));
	}
	else if (gGamemode == 2 && gObjectivePhaseNumber == 0)
	{
		pNavIdx = gIvDomObjectivePos[SlotOf(EventPlayer()) == 2 ? 2 : 3];
		pDomNavGuardIdx = pNavIdx;
		pNavPos = gNodes[pNavIdx];
		pIsNavReachableNode = true;
		Teleport(
			EventPlayer(),
			pNavPos + 0.1 * DirectionFromAngles(
				HorizontalAngleFromDirection(
					DirectionTowards(gIvDomObjectivePos[SlotOf(EventPlayer()) == 2 ? 0 : 1],
					pNavPos)
				),
				false
			)
		);
	}
	else
	{
		gTemp2 = MappedArray(gSpawnPosList, false);
		for (gIterator = 0; CountOf(gSpawnPosList); 1)
		{
			if (
				IsTrueForAny(
					gCombatants,
					IsInLineOfSight(
						gSpawnPosList[gIterator] + Up(),
						EyePosition(ArrayElement()),
						BarrierLOS.NoBarriersBlock
					)
				)
			)
			{
				gTemp2[gIterator] = 2;
			}
			else if (
				IsTrueForAny(
					gCombatants,
					DistanceBetween(gSpawnPosList[gIterator], ArrayElement()) <= 10
				)
			)
			{
				gTemp2[gIterator] = 1;
			}
		}
		gTemp1 = gSpawnPosList.Sort(v => gTemp2[CurrentArrayIndex()] + RandomReal(0, 0.5))[0];
		pNavIdx = gSpawnNearestNodeIdxList[gSpawnPosList.IndexOf(gTemp1)];
		pNavPos = gNodes[pNavIdx];
		pIsNavReachableNode = true;
		Teleport(EventPlayer(), gTemp1);
	}
}

# bots(1) pathing(13)
void find_wp_near_nav() "Subroutine: Find WP near Nav (find a walkable position near the Nav and check if it's reachable)"
{
	gTemp1 = NearestWalkablePosition(pNavPos);
	# If NWP is valid and not too far from the original destination
	if (gTemp1 != [] && DistanceBetween(pNavPos, gTemp1) < 3)
	{
		pNavPos = gTemp1;
	}
	else
	{
		# If original destination is not walkable
		if (DistanceBetween(pNavPos + Up(), RayCastHitPosition(pNavPos + Up(), pNavPos + 2 * Down(), null, null, false)) >= 3)
		{
			# Ranged bots stand still
			if (gIsLoadLimitReached || pIsRanged || DistanceBetween(EventPlayer(), pMyTarget) < 2)
			{
				pNavPos = EventPlayer().Position();
				Abort();
			}
			else
			{
				pNavPos = EventPlayer().Position() + Min(3.5, DistanceBetween(EventPlayer(), pMyTarget) - 2) * DirectionTowards(EventPlayer(), pMyTarget);
				if (IsOnGround(EventPlayer()))
				{
					# Check if destination is not walkable
					if (DistanceBetween(pNavPos + Up(), RayCastHitPosition(pNavPos + Up(), pNavPos + 2 * Down(), null, null, false)) >= 3)
					{
						pNavPos = EventPlayer().Position();
						pIsUsingCombatPathfinding -= 1;
						Abort();
					}
				}
			}
		}
	}
	# Check if the destination is reachable
	if (IsOnGround(EventPlayer()))
	{
		gTemp1 = EventPlayer().Position() + 1.75 * DirectionTowards(EventPlayer(), pNavPos) + Up();
		# If bot is near a ledge
		if (DistanceBetween(gTemp1, RayCastHitPosition(gTemp1, gTemp1 + 3 * Down(), null, null, false)) >= 3)
		{
			pNavPos = EventPlayer().Position();
			if (!pIsRanged)
			{
				pIsUsingCombatPathfinding -= 1;
				Abort();
			}
		}
	}
	pIsUsingCombatPathfinding = 3;
}

# bots(1) highvaluetarget(1) invasion(1)
void upgrade_health_and_healing() "Subroutine: Upgrade Health and Healing"
{
	gUpgradeCount += 1;
	SetHealingReceived(AllPlayers(Team.Team1), 85 + 2.5 * gUpgradeCount);
	StartHealOverTime(AllPlayers(Team.Team1), null, 1, 100000);
}

# domnination(2) highvaluetarget(1) invasion(1)
void start_kill_remaining_phase() "Subroutine: Start Kill remaining Phase"
{
	BigMessage(AllPlayers(Team.All), "Kill the remaining enemies!");
	gEnableNormalSpawns = false;
	AllPlayers(Team.Team2).pIsExpendable = false;
	gSpecialSpawnsCount = false;
	gObjectivePhaseNumber = 3;
	Communicate(RandomValueInArray(gCombatants), Communication.PressTheAttack);
}
