import "globalvars.ostw";
import "playervars.ostw";
import "subroutines.ostw";

globalvar Boolean gIsMapCg;
globalvar Number gNodesCount;
globalvar Number[][] gEdges;
globalvar String gCharString; // Probably used for navigation
globalvar String[] gDistanceMatrix;
globalvar Any[] gElevatorNodes; // Unknown, only set to empty array

playervar Number pLastTimesAtNodeT;
playervar Number pLastJumpT;
playervar Number pLastNavUpdateT;
playervar Vector pRealSpeedPos1;
playervar Vector pRealSpeedPos2;
playervar Vector pBestNavIdx;

void check_drop() "Subroutine: Check Drop (Avoid dropping too low)"
{
	if (gIsLoadLimitReached)
	{
		pNavPos = EventPlayer().Position();
		Abort();
	}

	gTemp1 = EventPlayer().Position() + 1.75 * DirectionTowards(
		EventPlayer(),
		Vector(
			pNavPos.X,
			EventPlayer().Position().Y,
			pNavPos.Z
		)
	) + Up();

	if (
		DistanceBetween(
			gTemp1,
			RayCastHitPosition(
				gTemp1,
				gTemp1 + 30 * Down(),
				null,
				null,
				false
			)
		) >= YOf(gTemp1) - PositionOf(pMyTarget).Y + 5
	)
	{
		pNavPos = EventPlayer().Position();
		pIsUsingCombatPathfinding -= 1;
		Abort();
	}

	gTemp1 = EventPlayer().Position() + 3.5 * DirectionTowards(
		EventPlayer(),
		Vector(
			pNavPos.X,
			EventPlayer().Position().Y,
			pNavPos.Z
		)
	) + Up();

	if (
		DistanceBetween(
			gTemp1,
			RayCastHitPosition(
				gTemp1,
				gTemp1 + 30 * Down(),
				null,
				null,
				false
			)
		) >= YOf(gTemp1) - PositionOf(pMyTarget).Y + 5
	)
	{
		pNavPos = EventPlayer().Position();
		pIsUsingCombatPathfinding -= 1;
		Abort();
	}
	pIsUsingCombatPathfinding = 3;
}

void update_target_nav() "Subroutine: Update Target Nav"
{
	pMyTarget.pLastNavUpdateT = TotalTimeElapsed();
	gTemp1 = EyePosition(pMyTarget) + pMyTarget.pEyeOffset;
	pMyTarget.pBestNavIdx = IndexOfArrayValue(
		gNodes, gNodes.Remove(gElevatorNodes).Filter(
			n => IsInLineOfSight(n + Vector(0, 1.5, 0), gTemp1, BarrierLOS.NoBarriersBlock)
		).Sort(
			n => DistanceBetween(pMyTarget, n) + AbsoluteValue(PositionOf(pMyTarget).Y - n.Y)
		)[0]
	);
	if (pMyTarget.pBestNavIdx == -1)
	{
		pMyTarget.pBestNavIdx = IndexOfArrayValue(gNodes, SortedArray(RemoveFromArray(gNodes, gElevatorNodes), DistanceBetween(pMyTarget, ArrayElement()))[0]);
	}
}

rule: "Team 2 CG: Improve Air Movement near Jump Pad"
Event.OngoingPlayer
Team.Team2
if (gIsMapCg)
if (pNavIdx == 4 || pNavIdx == 45)
if (pIsAlive)
if (IsInAir(EventPlayer()))
if (pIsUsingCombatPathfinding == 0)
if (HorizontalSpeedOf(EventPlayer()) >= 5)
if (
	DistanceBetween(
		EventPlayer(),
		Vector(
			pNavPos.X,
			EventPlayer().Position().Y,
			pNavPos.Z
		)
	) <= 0.5
)
{
	ApplyImpulse(
		EventPlayer(),
		-1 * DirectionFromAngles(
			HorizontalAngleFromDirection(VelocityOf(EventPlayer())),
			0
		),
		0.001,
		Relative.ToWorld,
		ContraryMotion.CancelXYZ
	);
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Enable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (!gIsLoadLimitReached)
if (!pIsPathfindingDisabled)
if (pIsUsingCombatPathfinding == 0)
if (pIsTargetInLos >= 5)
if (pIsAggressive)
if (IsOnGround(EventPlayer()))
if (
	PositionOf(pMyTarget).Y - EventPlayer().Position().Y <= 2
	|| YOf(gNodes[pMyTarget.pBestNavIdx]) - EventPlayer().Position().Y <= 1
)
if (
	pIsRanged
	|| DistanceBetween(EventPlayer(), pMyTarget) <= 1 + DistanceBetween(pMyTarget, gNodes[pMyTarget.pBestNavIdx])
)
{
	if (pMyTarget.pLastNavUpdateT + CountOf(gCombatants) * 0.4 < TotalTimeElapsed())
	{
		update_target_nav();
		AbortIfConditionIsFalse();
	}

	if (
		IsTrueForAny(
			gElevatorNodes,
			DistanceBetween(
				EventPlayer(),
				Vector(
					XOf(ArrayElement()),
					YOf(EventPlayer().Position()),
					ZOf(ArrayElement())
				)
			) < 1.5
		)
	)
	{
		Wait(1, WaitBehavior.IgnoreCondition);
		AbortIfConditionIsFalse();
	}

	pIsUsingCombatPathfinding = 3;
	pTargetLastSeenPos = PositionOf(pMyTarget);
	pIsNavReachableNode = false;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2: Disable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (pIsUsingCombatPathfinding)
if ((pIsAggressive && pIsTargetInLos) == 0)
{
	pIsUsingCombatPathfinding = 0;
}

rule: "Team 2: Set Nav (Not in Combat), Get Back to Node, Set Nav is Node"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
if (pIsUsingCombatPathfinding == 0)
if (!pIsNavReachableNode)
{
	if (!(gIsLoadLimitReached || pIsPathfindingDisabled))
	{
		if (pCombatPathfindingType == 0)
		{
			SetMoveSpeed(EventPlayer(), gMutAmpted ? 115 : 100);
		}

		pNavPos = gNodes.Filter(
			n => IsInLineOfSight(EventPlayer(), n, BarrierLOS.NoBarriersBlock)
		).Sort(n => DistanceBetween(EventPlayer(), n))[0];

		if (!pNavPos)
		{
			pNavPos = gNodes.Sort(n => DistanceBetween(EventPlayer(), n))[0];
		}

		pNavIdx = IndexOfArrayValue(gNodes, pNavPos);
		pIsNavReachableNode = true;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (Not in Combat), Select Next Node, Set Last Time at Node"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
if (pIsUsingCombatPathfinding == 0)
if (pIsNavReachableNode)
if (DistanceBetween(EventPlayer(), pNavPos) <= 1)
{
	pLastTimesAtNodeT = TotalTimeElapsed();
	if (!(gIsLoadLimitReached || pIsPathfindingDisabled))
	{
		if (gGamemode == 2 && pIsLivingBoss && !pIsAggressive)
		{
			if (pNavIdx == pDomNavGuardIdx)
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				LoopIfConditionIsTrue();
			}
			else
			{
				pNavIdx = gEdges[pNavIdx].Sort(
					n => RandomReal(0, 0.5) + IndexOfStringChar(
						gCharString,
						CharInString(
							gDistanceMatrix[
								RoundToInteger(
									(n * gNodesCount + pDomNavGuardIdx) / 128,
									Rounding.Down
								)
							],
							(n * gNodesCount + pDomNavGuardIdx) % 128
						)
					)
				)[0];
				pNavPos = gNodes[pNavIdx];
			}
		}
		else if (pMyTarget.pIsCombatant)
		{
			if (pMyTarget.pLastNavUpdateT + CountOf(gCombatants) * 0.4 < TotalTimeElapsed())
			{
				update_target_nav();
			}
			if (pNavIdx == pMyTarget.pBestNavIdx && pIsAggressive && pFearEndT < TotalTimeElapsed())
			{
				pIsTargetInLos = 5;
				pIsUsingCombatPathfinding = 3;
				pTargetLastSeenPos = PositionOf(pMyTarget);
				pIsNavReachableNode = false;
			}
			else
			{
				pNavIdx = gEdges[pNavIdx].Sort(
					n => (
						pIsAggressive && pFearEndT < TotalTimeElapsed() ? 1 : -1
					) * (
						RandomReal(0, 0.5) + IndexOfStringChar(
							gCharString,
							CharInString(
								gDistanceMatrix[
									RoundToInteger(
										(n * gNodesCount + pMyTarget.pBestNavIdx) / 128,
										Rounding.Down
									)
								],
								(n * gNodesCount + pMyTarget.pBestNavIdx) % 128
							)
						)
					)
				)[0];
				pNavPos = gNodes[pNavIdx];
			}
		}
		else
		{
			pNavIdx = RandomValueInArray(gEdges[pNavIdx]);
			pNavPos = gNodes[pNavIdx];
		}
	}
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (in Combat)"
Event.OngoingPlayer
Team.Team2
if (pIsUsingCombatPathfinding)
{
	if (
		!(
			gIsLoadLimitReached
			|| pIsPathfindingDisabled
			|| HasStatus(EventPlayer(), Status.Rooted)
			|| HasStatus(EventPlayer(), Status.Stunned)
		)
	)
	{
		if (
			IsInLineOfSight(
				EventPlayer().EyePosition(),
				EyePosition(pMyTarget) + pMyTarget.pEyeOffset,
				BarrierLOS.NoBarriersBlock
			)
		)
		{
			pTargetLastSeenPos = PositionOf(pMyTarget);
			if (pIsFlying)
			{
				pNavPos = RayCastHitPosition(
					EyePosition(pMyTarget),
					EyePosition(pMyTarget) + 12 * DirectionFromAngles(
						HorizontalFacingAngleOf(pMyTarget) + (RandomInteger(0, 1) ? -45 : 45),
						-60
					),
					null,
					null,
					false
				);
				Wait(0.5, WaitBehavior.IgnoreCondition);
			}
			else if (pMyTarget.pIsFlying && pCombatPathfindingType != 4)
			{
				# Roam
				pNavPos = EventPlayer().Position() + 3.5 * DirectionFromAngles(
					RandomInteger(-179, 180),
					0
				);
				find_wp_near_nav();
			}
			else
			{
				# Long Range, roam randomly, slow
				if (pCombatPathfindingType == 0)
				{
					if (
						DistanceBetween(
							EventPlayer(), pMyTarget
						) <= (
							EventPlayer().Hero() == Hero.Baptiste
								? 20
								: 15
						)
					)
					{
						pNavPos = EventPlayer().Position() + 2.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						pNavPos = EventPlayer().Position() + 2.5 * DirectionFromAngles(
							HorizontalAngleFromDirection(
								DirectionTowards(EventPlayer(), pMyTarget)
							) + RandomValueInArray([-45, 0, 45]),
							0
						);
					}
					find_wp_near_nav();
				}
				else if (pCombatPathfindingType == 1)
				{
					if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
					{
						pNavPos = EventPlayer().Position() + Min(
							3.5, DistanceBetween(EventPlayer(), pMyTarget) - 2
						) * DirectionTowards(EventPlayer(), pMyTarget);
						find_wp_near_nav();
					}
					else
					{
						pNavPos = PositionOf(pMyTarget) + 2 * DirectionTowards(pMyTarget, EventPlayer());
						check_drop();
					}
				}
				else if (pCombatPathfindingType == 2)
				{
					pNavPos = EventPlayer().Position() + Min(
						1.5, DistanceBetween(EventPlayer(), pMyTarget) - 2
					) * DirectionTowards(EventPlayer(), pMyTarget);
					find_wp_near_nav();
				}
				else if (pCombatPathfindingType == 3)
				{
					pNavPos = PositionOf(pMyTarget) + 5 * DirectionFromAngles(
						HorizontalFacingAngleOf(pMyTarget) + RandomValueInArray([-45, 45]),
						0
					);
					if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
					{
						pNavPos = EventPlayer().Position() + Min(
							3.5, DistanceBetween(EventPlayer(), pNavPos)
						) * DirectionTowards(EventPlayer(), pNavPos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (pCombatPathfindingType == 4)
				{
					if (DistanceBetween(EventPlayer(), pMyTarget) <= 12)
					{
						pNavPos = EventPlayer().Position() + 3.5 * DirectionFromAngles(
							HorizontalAngleFromDirection(
								DirectionTowards(pMyTarget, EventPlayer())
							) + (
								DistanceBetween(EventPlayer(), pMyTarget) <= 8 && pRealSpeed <= 1 ? RandomValueInArray([-135, 135]) : 0
							),
							0
						);
						find_wp_near_nav();
					}
					else
					{
						pNavPos = EventPlayer().Position();
					}
				}
				else if (pCombatPathfindingType == 5)
				{
					pNavPos = PositionOf(pMyTarget) + 3 * DirectionFromAngles(
						HorizontalFacingAngleOf(pMyTarget),
						0
					);
					if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
					{
						pNavPos = EventPlayer().Position() + Min(
							3.5,
							DistanceBetween(EventPlayer(), pNavPos)
						) * DirectionTowards(EventPlayer(), pNavPos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (pCombatPathfindingType == 6)
				{
					pNavPos = PositionOf(pMyTarget) + 1.5 * DirectionFromAngles(
						HorizontalFacingAngleOf(pMyTarget) + (
							HorizontalAngleTowards(pMyTarget, EventPlayer()) > 0 ? 90 : -90
						),
						0
					);
					if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
					{
						pNavPos = EventPlayer().Position() + Min(
							3.5, DistanceBetween(EventPlayer(), pNavPos)
						) * DirectionTowards(EventPlayer(), pNavPos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (pCombatPathfindingType == 7)
				{
					if (DistanceBetween(EventPlayer(), pMyTarget) <= 17)
					{
						pNavPos = EventPlayer().Position() + 3.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						pNavPos = EventPlayer().Position() + 3.5 * DirectionFromAngles(
							HorizontalAngleFromDirection(
								DirectionTowards(EventPlayer(), pMyTarget)
							) + RandomValueInArray([-45, 0, 45]),
							0
						);
					}
					find_wp_near_nav();
				}
				else if (pCombatPathfindingType == 8)
				{
					gTemp1 = PlayersWithinRadius(
						EventPlayer(), 3, Team.Team2, RadiusLOS.Off
					).Filter(p => p.pIsAlive).Remove(EventPlayer());

					if (CountOf(gTemp1))
					{
						pNavPos = EventPlayer().Position() + 3.5 * DirectionTowards(
							SortedArray(
								gTemp1,
								DistanceBetween(EventPlayer(), ArrayElement())
							)[0],
							EventPlayer()
						);
						find_wp_near_nav();
					}
					else
					{
						pNavPos = EventPlayer().Position();
					}
				}
				else if (pCombatPathfindingType == 9)
				{
					if (pAbVar1)
					{
						if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
						{
							pNavPos = EventPlayer().Position() + 6 * DirectionTowards(EventPlayer(), pMyTarget);
							find_wp_near_nav();
						}
						else
						{
							pNavPos = PositionOf(pMyTarget);
							check_drop();
						}
					}
					else
					{
						if (pAbVar2)
						{
							pNavPos = PositionOf(pMyTarget) + 3 * DirectionFromAngles(
								HorizontalFacingAngleOf(pMyTarget),
								0
							);
						}
						else
						{
							pNavPos = PositionOf(pMyTarget) + 5 * DirectionFromAngles(
								HorizontalFacingAngleOf(pMyTarget) + RandomValueInArray([-45, 45]),
								0
							);
						}
						if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y > -2)
						{
							pNavPos = EventPlayer().Position() + Min(
								4,
								DistanceBetween(EventPlayer(), pNavPos)
							) * DirectionTowards(EventPlayer(), pNavPos);
							find_wp_near_nav();
						}
						else
						{
							check_drop();
						}
					}
				}
			}
			if (pCombatPathfindingType == 0)
			{
				SetMoveSpeed(EventPlayer(), gMutAmpted ? 75.5 : 65);
			}
		}
		else
		{
			if (
				DistanceBetween(
					EventPlayer(), Vector(
						pTargetLastSeenPos.X,
						EventPlayer().Position().Y,
						pTargetLastSeenPos.Z
					)
				) < 0.5
			)
			{
				pTargetLastSeenPos = PositionOf(pMyTarget);
			}
			if (pIsFlying)
			{
				pNavPos = pTargetLastSeenPos;
			}
			else
			{
				pNavPos = EventPlayer().Position() + Min(
					3.5,
					DistanceBetween(EventPlayer(), pTargetLastSeenPos)
				) * DirectionTowards(EventPlayer(), pTargetLastSeenPos);
				find_wp_near_nav();
			}
			if (pCombatPathfindingType == 0)
			{
				SetMoveSpeed(EventPlayer(), gMutAmpted ? 115 : 100);
			}
		}
	}
	Wait(gIsLoadLimitReached ? 1 : 0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Calculate Real Speed"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
{
	if (gIsLoadLimitReached || pIsPathfindingDisabled)
	{
		# Larger than 1.5 to not trigger stuck rules
		pRealSpeed = 1.6;
		Wait(0.5, WaitBehavior.AbortWhenFalse);
	}
	else
	{
		pRealSpeedPos1 = EventPlayer().Position();
		if (IsJumping(EventPlayer()))
		{
			pLastJumpT = TotalTimeElapsed();
		}
		if (pLastJumpT + 0.15 >= TotalTimeElapsed())
		{
			pRealSpeed = DistanceBetween(
				Vector(
					pRealSpeedPos1.X,
					pRealSpeedPos2.Y,
					pRealSpeedPos1.Z
				),
				pRealSpeedPos2
			) / 0.112;
		}
		else
		{
			pRealSpeed = DistanceBetween(pRealSpeedPos1, pRealSpeedPos2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
		pRealSpeedPos2 = EventPlayer().Position();
		if (IsJumping(EventPlayer()))
		{
			pLastJumpT = TotalTimeElapsed();
		}
		if (pLastJumpT + 0.15 >= TotalTimeElapsed())
		{
			pRealSpeed = DistanceBetween(
				Vector(
					pRealSpeedPos1.X,
					pRealSpeedPos2.Y,
					pRealSpeedPos1.Z
				),
				pRealSpeedPos2
			) / 0.112;
		}
		else
		{
			pRealSpeed = DistanceBetween(pRealSpeedPos1, pRealSpeedPos2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot is stuck"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
if (pRealSpeed <= 1.5)
if (!pIsFlying)
if (pSlowedUntil < TotalTimeElapsed())
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (
	DistanceBetween(
		EventPlayer(),
		Vector(
			pNavPos.X,
			YOf(pIsUsingCombatPathfinding
				? EventPlayer().Position()
				: pNavPos
			),
			pNavPos.Z
		)
	) >= 0.5
)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIf(
		EventPlayer().Hero() == Hero.Reinhardt
		&& IsUsingUltimate(EventPlayer())
	);

	if (
		IsTrueForAny(
			gElevatorNodes,
			DistanceBetween(
				EventPlayer(),
				Vector(
					XOf(ArrayElement()),
					EventPlayer().Position().Y,
					ZOf(ArrayElement())
				)
			) < 1.5
		)
	)
	{
		Wait(1.5, WaitBehavior.AbortWhenFalse);
	}

	AbortIfConditionIsFalse();

	if (pIsUsingCombatPathfinding)
	{
		if (
			AbsoluteValue(
				HorizontalAngleFromDirection(
					ThrottleOf(EventPlayer())
				)
			) <= 45
		)
		{
			PressButton(EventPlayer(), Button.Jump);
		}
	}
	else
	{
		PressButton(EventPlayer(), Button.Jump);
		if (
			!(
				pIsTargetInLos
				|| pFearEndT >= TotalTimeElapsed()
			)
		)
		{
			DisableMovementCollisionWithPlayers(EventPlayer());
			Wait(0.5, WaitBehavior.IgnoreCondition);
			EnableMovementCollisionWithPlayers(EventPlayer());
		}
		Wait(0.5, WaitBehavior.AbortWhenFalse);
		pIsNavReachableNode = false;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Teleport if Target not in LOS and hasn't reached Node for 8 seconds"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (!pIsPathfindingDisabled)
if (pIsTargetInLos == 0)
if (pFearEndT < TotalTimeElapsed())
if (pLastTimesAtNodeT < TotalTimeElapsed())
{
	Wait(8, WaitBehavior.AbortWhenFalse);
	LoopIf(gIsLoadLimitReached);
	teleport_to_free_spawn();
}
