/** As the name implies, this file hands the gamestate.
*/

enum GameState
{
	InProgress,
	PreGame,
	InterRound
}

enum HS_Gamemode
{
	Invasion, // Portal
	HighValueTarget, // Roaming boss
	Domination // Capture zones
}

String GAMEMODE_STRING: ["Invasion", "High Value Target", "Domination"][gGamemode];
String GAMESTATE_STRING: ["Pregame", "Inprogress", "Interround"][gGameState];
Number FORCE_START_COUNTDOWN_LENGTH: 20;

globalvar GameState gGameState = GameState.PreGame;
globalvar HS_Gamemode | HS_Gamemode[] gGamemode;
globalvar Number gRound;
globalvar Number gPreRoundTimer;

playervar Boolean pReady = false;

// Handle changing from pregame to inprogress
// How should going between inprogress and interround go?
// Each gamemode can possibly set a flag when they want to end the round.
// Or each gamemode changes the gamestate themselves.

rule: "[GAMESTATE] Start the game when every player is ready"
if (gGameState)
# Cannot use element optimisation
if (NumberOfPlayers(Team.Team1) > 0)
if (
	IsTrueForAll(
		AllPlayers(Team.Team1),
		IsDummyBot(ArrayElement()) || ArrayElement().pReady
	)
)
{
	# Grace period if the player is by themself
	if (gFriendlyBot != null)
	{ Wait(2, WaitBehavior.AbortWhenFalse); }

	gGameState = GameState.InProgress;
	gPreRoundTimer = ZERO;
	AllPlayers().pReady = false;
}

rule: "[GAMESTATE] Player readying up"
Event.OngoingPlayer
Team.Team1
if (gGameState)
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
	Wait(0.4, WaitBehavior.AbortWhenFalse);
	pReady = !pReady;
	if (pReady)
	{ Communicate(EventPlayer(), Communication.Ready); }
}

rule: "[GAMESTATE] Countdown if at least one person is ready"
if (AllPlayers(Team.Team1).IsTrueForAny(p => p.pReady))
{
	gPreRoundTimer = FORCE_START_COUNTDOWN_LENGTH;
	while (gGameState)
	{
		Wait(ONE);
		gPreRoundTimer -= ONE;

		# If everyone has unreadied, abort countdown
		if (
			IsTrueForAll(
				AllPlayers(Team.Team1),
				!ArrayElement().pReady
			)
		)
		{
			gPreRoundTimer = ZERO;
			Abort();
		}

		if (gPreRoundTimer == ZERO)
		{
			gGameState = GameState.InProgress;
			AllPlayers().pReady = false;
		}
	}
}
