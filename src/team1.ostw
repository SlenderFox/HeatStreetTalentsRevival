/** All of team 1's (player team's) gameplay functionalities.
*/

import "shared.ostw";
import "gamemodes/invasion.ostw";

playervar Number p_downedStartTime;
playervar Number p_reviveProgress;
playervar Player[] p_reviverList;
playervar Boolean p_isChangingHeroes;

void DisablePlayer() playervar "[TEAM 1 SUBROUTINE] Disable Player"
{
	ForceThrottle(EventPlayer(), ZERO, 0.1, ZERO, 0.1, ZERO, 0.1);
	SetPrimaryFireEnabled(EventPlayer(), false);
	SetSecondaryFireEnabled(EventPlayer(), false);
	SetAbility1Enabled(EventPlayer(), false);
	SetAbility2Enabled(EventPlayer(), false);
	SetMeleeEnabled(EventPlayer(), false);
	SetJumpEnabled(EventPlayer(), false);
	SetCrouchEnabled(EventPlayer(), false);
	SetUltimateAbilityEnabled(EventPlayer(), false);
	//DisallowButton(EventPlayer(), Button.Ultimate);
}

void EnablePlayer() playervar "[TEAM 1 SUBROUTINE] Enable Player"
{
	StopForcingThrottle(EventPlayer());
	SetPrimaryFireEnabled(EventPlayer(), true);
	SetSecondaryFireEnabled(EventPlayer(), true);
	SetAbility1Enabled(EventPlayer(), true);
	SetAbility2Enabled(EventPlayer(), true);
	SetMeleeEnabled(EventPlayer(), true);
	SetJumpEnabled(EventPlayer(), true);
	SetCrouchEnabled(EventPlayer(), true);
	SetUltimateAbilityEnabled(EventPlayer(), true);
	//AllowButton(EventPlayer(), Button.Ultimate);
}

rule: "[TEAM 1] Initialise player effects"
Event.OngoingPlayer
Team.Team1
{
	CreateEffect(
		p_downedStartTime ? AllPlayers() : [],
		Effect.Ring,
		Color.Yellow,
		EventPlayer(),
		3,
		EffectRev.VisibleTo
	);
}

rule: "[TEAM 1] Player downing"
Event.OnDeath
Team.Team1
if (p_isChangingHeroes == false)
{
	if (!p_downedStartTime)
	{
		p_downedStartTime = TotalTimeElapsed();
		DisablePlayer();
		DisableMessages(EventPlayer());
		p_reviveProgress = ZERO;
		StartScalingPlayer(EventPlayer(), 0.1, false);
	}
	if (EventWasEnvironment())
	{ RecoveryTeleport(); }
	Resurrect(EventPlayer());
	# Clear any temporary phased out status
	ClearStatus(EventPlayer(), Status.PhasedOut);
	SetStatus(EventPlayer(), null, Status.Invincible, 9999);
	// 0.05
	Wait(0.033, WaitBehavior.RestartWhenTrue);
	SetPlayerHealth(EventPlayer(), ONE);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
	DisableMovementCollisionWithPlayers(EventPlayer());
}

void RevivePlayer(in Player pPlayer)
{
	SmallMessage(AllPlayers(), <" <0> has been revived!", pPlayer>);
	pPlayer.p_downedStartTime = ZERO;
	EnableMessages(pPlayer);
	ClearStatus(pPlayer, Status.PhasedOut);
	ClearStatus(pPlayer, Status.Invincible);
	EnableMovementCollisionWithPlayers(pPlayer);
	StopScalingPlayer(pPlayer);
}

rule: "[TEAM 1] Revive downed player"
Event.OngoingPlayer
Team.Team1
if (p_downedStartTime)
if (p_downedStartTime + ONE < TotalTimeElapsed())
{
	# Revive area is a cylinder
	p_reviverList = AllPlayers(Team.Team1).Filter(
		p => !p.p_downedStartTime
			// Check horizontal distance
			&& DistanceBetween(
				EventPlayer(),
				Vector(
					p.Position().X,
					EventPlayer().Position().Y,
					p.Position().Z
				)
			) <= 3
			// Check vertical distance
			&& AbsoluteValue(EventPlayer().Position().Y - p.Position().Y) <= 3
			// I have no idea what this does, maybe LOS used to not work with ice block?
			//&& (
			//	HeroOf(p) == Hero.Mei
			//	&& IsUsingAbility1(p)
			//	|| IsInLineOfSight(EventPlayer(), p, BarrierLOS.NoBarriersBlock)
			//)
			&& IsInLineOfSight(EventPlayer(), p, BarrierLOS.EnemyBarriersBlock)
	);

	# At least one person is reviving
	if (CountOf(p_reviverList))
	{
		p_reviveProgress += p_reviverList.IsTrueForAll(
			p => HasStatus(p, Status.Invincible)
			|| HasStatus(p, Status.PhasedOut)
		) ? 2.5 : 5;

		if (p_reviveProgress >= 100)
		{
			EnablePlayer();
			RevivePlayer(EventPlayer());
		}
	}
	else
	{
		p_reviveProgress = ZERO;
	}

	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "[TEAM 1] Changing heroes"
Event.OngoingPlayer
Team.Team1
# Cannot change heroes while downed
if (EventPlayer().p_downedStartTime == false)
# Cannot changes heroes during round
if (g_roundInProgress == false)
if (EventPlayer().IsButtonHeld(Button.Reload))
{
	Wait(0.4, WaitBehavior.AbortWhenFalse);
	AbortIf(p_downedStartTime);
	p_isChangingHeroes = true;
	# Sets the position as the ground under the player to avoid spawning them midair
	Vector position! = NearestWalkablePosition(EventPlayer());
	Vector facing! = EventPlayer().FacingDirection();
	Hero previousHero = EventPlayer().Hero();
	SetAllowedHeroes(EventPlayer(), Hero.Brigitte);
	SetAllowedHeroes(EventPlayer(), Hero.Orisa);
	SetAllowedHeroes(EventPlayer(), AllHeroes());
	Wait(0.1);
	WaitUntil(HasSpawned(EventPlayer()) || g_roundInProgress, 9999);
	if (!HasSpawned(EventPlayer()))
	{ ForcePlayerHero(EventPlayer(), previousHero); }
	Teleport(EventPlayer(), position);
	SetFacing(EventPlayer(), facing);
	p_isChangingHeroes = false;
	Wait(0.033);
	StopForcingHero(EventPlayer());
}

rule: "[TEAM 1] Prevent Reinhardt from pinning the boss"
Event.PlayerDealtKnockback
Team.Team1
Player.Reinhardt
if (Victim().p_isBoss)
# This somehow registers as the pin connecting
if (EventAbility() == null)
{
	Damage(Victim(), EventPlayer(), 100);
	CancelPrimaryAction(EventPlayer());
	SetStatus(EventPlayer(), Victim(), Status.KnockedDown, 1.2);
}

rule: "[TEAM 1] Force bots to face roadhog when they get hooked"
Event.OnDamageDealt
Team.Team1
Player.Roadhog
if (EventAbility() == Button.Ability1)
{
	SetFacing(
		Victim(),
		DirectionTowards(Victim(), EventPlayer()),
		Relative.ToWorld
	);
}

rule: "[TEAM 1] Make roadhog pull himself towards the boss"
Event.OnDamageDealt
Team.Team1
Player.Roadhog
if (Victim().p_isBoss)
if (EventAbility() == Button.Ability1)
{
	if (Victim().Hero() == Hero.WreckingBall)
	{
		CancelPrimaryAction();
		Abort();
	}
	Wait(0.3);
	AbortIf(
		!(
			IsInLineOfSight(
				Victim(),
				EventPlayer(),
				BarrierLOS.EnemyBarriersBlock
			)
			&& Victim().IsAlive()
		)
	);

	StartForcingPlayerPosition(Victim(), Victim(), false);
	ApplyImpulse(
		EventPlayer(),
		Up(),
		2,
		Relative.ToWorld,
		ContraryMotion.CancelXYZ
	);
	ApplyImpulse(
		EventPlayer(),
		DirectionTowards(EventPlayer(), Victim()),
		(DistanceBetween(EventPlayer(), Victim()) - 3.2) * 4,
		Relative.ToWorld,
		ContraryMotion.Cancel
	);
	Wait(0.3);
	StopForcingPlayerPosition(Victim());
}
