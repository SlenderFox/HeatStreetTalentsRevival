/** Node-based pathfinding system. Moves dummy bots to a target point.
 * Attributes allow custom navigation.
 * Made by Deltin, modified by SlenderFox.
*/

import "../shared.ostw";

struct Map_PF
{
	# The points in the map.
	public Vector[] nodes;
	# `[node][i][0]` = neighbor index,
	# `[node][i][1][j]` = attributes
	public Any[][][] neighbours;
}

struct Node_PF
{
	public Number gScore;
	public Number fScore;
	public Number parent;
	public Number nodeIndex;
}

# The currently loaded map
globalvar Map_PF g_loadedMap_PF;
globalvar Number g_iterationsThisTick_PF;
# Current pathfinder execution owner.
globalvar Player g_execOwner_PF;

# The timestamp where a player requests a pathfind.
playervar Number p_wait_PF;
# The final pathfinding target.
playervar Vector p_destination_PF;
# The attributes assigned to the player.
playervar Number[] p_playerAttributes_PF;
# The attributes of a player's current pathfinding edge.
playervar Number[] p_attributes_PF;

# The saved target. If the distance between this and PF_pDestination becomes
# too large, the pathfinding path will be updated.
playervar Vector p_savedTarget_PF;
# Determines if the player is pathfinding.
playervar Boolean p_isPathfinding_PF;
# The current node that the player is walking to.
# If this is -1 but `p_isPathfinding_PF` is true, then the player
# is walking to `p_destination_PF`.
playervar Number p_currentNodeIndex_PF;
# The position that the player is actively walking towards.
playervar Vector p_walkingToPosition_PF;
# The path that the player will walk along. These are indexes in
# `g_loadedMap_PF.nodes`. A value of `-1` will point to `p_destination_PF`.
playervar Number[] p_path_PF;
# The timestamp when the player reaches a node.
playervar Number p_startTime_PF;
# The position the player was at when they started walking to `p_walkingToPosition_PF`.
playervar Vector p_walkingFromPosition_PF;
# The node closest to the player.
playervar Number p_activeNode_PF;
# This variable is set when a player fails to reaches a node.
playervar Number p_stuckOnNode_PF;
# Player received path from another pathfinder.
playervar Boolean p_wasBroadcasted_PF;
# Is the player failing to walk?
playervar Boolean p_isStuck_PF;
playervar Number p_rollingAvVelocity_PF;
playervar Number p_stuckVelocityThreshold = 3;

rule: "【PF Core】Prepare loaded map"
{
	WaitUntil(<Boolean>g_loadedMap_PF.nodes, 9999);
	for (g_iter = ZERO; g_loadedMap_PF.nodes.Length; ONE)
	{
		g_loadedMap_PF.nodes[g_iter] = Vector(
			g_loadedMap_PF.nodes[g_iter].X,
			g_loadedMap_PF.nodes[g_iter].Y.Floor() + (g_iter / 1000) * (g_loadedMap_PF.nodes[g_iter].Y < ZERO ? -1 : ONE),
			g_loadedMap_PF.nodes[g_iter].Z
		);
	}
}

void PF_Tick() "【PF Core Subroutine】☞ Tick"
{
	g_iterationsThisTick_PF--;
	if (g_iterationsThisTick_PF <= ZERO)
	{
		MinWait();
		WaitUntil(Max(ServerLoadAverage(), ServerLoad()) < 255, 0.25);
		# This determines the pathfinding budget for the current tick.
		g_iterationsThisTick_PF = (
			Max(ServerLoadAverage(), ServerLoad()) < 230
		) + (
			Max(ServerLoadAverage(), ServerLoad()) < 180
		) * 2 + ONE;
	}
}

rule: "【PF Core】Select next pathfinder"
if (!EntityExists(g_execOwner_PF) || g_execOwner_PF == null)
if (
	AllPlayers()
	.Filter(p => IsDummyBot(p))
	.IsTrueForAny(p => p.p_wait_PF)
)
{
	g_execOwner_PF = AllPlayers()
		.FilteredArray(p => IsDummyBot(p) && p.p_wait_PF)
		.SortedArray(p => p.p_wait_PF).First;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Update & Execute"
Event.OngoingPlayer
if (p_destination_PF)
if (IS_DUMMY)
if (EventPlayer().DistanceTo(p_destination_PF) > 1.2)
if (!p_savedTarget_PF || p_destination_PF.DistanceTo(p_savedTarget_PF) > 2.2)
{
	# Ensure that a map is loaded.
	if (!g_loadedMap_PF.nodes)
	{
		LogToInspector(
			<
				"Error: Attempted to pathfind player <0> without a loaded map.",
				EventPlayer()
			>
		);
		return;
	}

	p_wait_PF = TotalTimeElapsed();
	p_wasBroadcasted_PF = false;
	WaitUntil(g_execOwner_PF == EventPlayer() || p_wasBroadcasted_PF, 9999);

	# Update saved destination
	p_savedTarget_PF = p_destination_PF;
	if (!p_wasBroadcasted_PF)
	{
		AStar();
		g_execOwner_PF = null;
	}

	if (p_path_PF.Length)
	{
		p_isPathfinding_PF = true;
		p_currentNodeIndex_PF = p_path_PF.First;
		p_walkingToPosition_PF = g_loadedMap_PF.nodes[p_currentNodeIndex_PF];
		PF_UpdateNodeMeta();
		PF_WalkToDestination();
	}

	p_wait_PF = null;
	Wait(2);
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Node reached"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
if (p_walkingToPosition_PF)
# Horizontal distance to current position is less than 1.
if (
	DistanceBetween(
		PositionOf() * Vector(1, 0, 1),
		p_walkingToPosition_PF * Vector(1, 0, 1)
	) <= 1
)
# Vertical distance to current position is less than 1.
if (PositionOf().Y - p_walkingToPosition_PF.Y~Abs() <= 1)
{
	if (p_path_PF.Length > ZERO && p_currentNodeIndex_PF != -1)
	{
		PF_ProgressEventPlayer();
		Wait(0.2);
		LoopIfConditionIsTrue();
	}
	# Reached destination
	else
	{ p_destination_PF = null; }
}

rule: "【PF Core】Stop throttle when PF_pDestination is reset"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
if (p_destination_PF == null)
{
	StopThrottleInDirection();
	p_isPathfinding_PF = false;
	p_savedTarget_PF = null;
}

rule: "【PF Core】Insurance"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
if (p_walkingToPosition_PF)
{
	# Recalibrate
	if (
		DistanceBetween(
			(p_walkingFromPosition_PF + p_walkingToPosition_PF) / 2,
			EventPlayer()
		) > (
			DistanceBetween(p_walkingFromPosition_PF, p_walkingToPosition_PF) + 2
		) * 1.2
	)
	{ PF_Recalibrate(); }
	# Smooth step
	else if (
		p_path_PF.Length == 2
			&& DistanceBetween(
				EventPlayer(),
				p_savedTarget_PF
			) < DistanceBetween(
				p_walkingToPosition_PF,
				p_savedTarget_PF
			)
			&& IsInLineOfSight(
				PositionOf() + Up() * 0.25,
				p_savedTarget_PF + Up() * 0.25
			)
	)
	{ PF_ProgressEventPlayer(); }
	# Recovery
	else if (
		EventPlayer().DistanceTo(p_walkingToPosition_PF) > .25
			&& p_isStuck_PF
				|| DistanceBetween(
					p_walkingFromPosition_PF, p_walkingToPosition_PF
				) - 5.5 * 0.9 * (TotalTimeElapsed() - p_startTime_PF) < ZERO
			&& !HasStatus(EventPlayer(), Status.Rooted)
			&& !HasStatus(EventPlayer(), Status.Frozen)
			&& !HasStatus(EventPlayer(), Status.Asleep)
			&& !HasStatus(EventPlayer(), Status.KnockedDown)
			&& !HasStatus(EventPlayer(), Status.Stunned)
	)
	{
		if (p_currentNodeIndex_PF == -1)
		{
			p_walkingToPosition_PF = null;
		}
		else if (p_stuckOnNode_PF - 2 == p_currentNodeIndex_PF)
		{
			LogToInspector(
				<
					"Pathfinder <0> struggled to reach node <1> at <2>. Try adjusting your map in the editor.",
					EventPlayer(),
					p_currentNodeIndex_PF,
					g_loadedMap_PF.nodes[p_currentNodeIndex_PF]
				>
			);
			Teleport(EventPlayer(), p_walkingToPosition_PF);
		}
		else
		{
			p_stuckOnNode_PF = p_currentNodeIndex_PF + 2;
			PF_Recalibrate();
		}
	}
	# Shift destination
	else if (
		p_walkingToPosition_PF != p_destination_PF
			&& p_currentNodeIndex_PF == -1
			&& p_savedTarget_PF.DistanceTo(p_destination_PF) < 5
			&& IsInLineOfSight(p_savedTarget_PF + Up(), p_destination_PF + Up())
	)
	{ p_walkingToPosition_PF = p_destination_PF; }

	Wait(2);
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Rolling average velocity"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
{
	p_rollingAvVelocity_PF += VelocityOf().Magnitude;
	p_rollingAvVelocity_PF /= 2;
	Wait(0.1);
	LoopIfConditionIsTrue();
	p_rollingAvVelocity_PF = 0;
}

rule: "【PF Core】Check throttle"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
if (p_rollingAvVelocity_PF < p_stuckVelocityThreshold)
{
	Wait(2.1, WaitBehavior.AbortWhenFalse);
	p_isStuck_PF = true;
	WaitUntil(
		!p_walkingToPosition_PF
		|| !p_isPathfinding_PF
		|| p_rollingAvVelocity_PF >= p_stuckVelocityThreshold, 9999
	);
	p_isStuck_PF = false;
}

rule: "【PF Additional】Melee and jump if stuck"
Event.OngoingPlayer
if (IS_DUMMY)
if (p_isPathfinding_PF)
if (p_isStuck_PF)
{
	PF_LookAtDestination();
	Wait(0.2);
	PressButton(EventPlayer(), Button.Melee);
	StopFacing();
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	PressButton(EventPlayer(), Button.Jump);
}

void PF_ProgressEventPlayer() playervar "【PF Core Subroutine】☞ Progress event player"
{
	// Remove after debugging
	if (p_path_PF.Length == ZERO)
	{ return; }

	# Pop the current path.
	p_path_PF.ModRemoveByIndex(ZERO);
	# Update the current pathfind attributes.
	if (p_path_PF.Length && p_path_PF.First != -1)
	{
		// Do not use zero, this is already optimised with FirstOf()
		# Any rules watching these with the matching condition will activate.
		p_attributes_PF = g_loadedMap_PF.neighbours[p_path_PF.First].FilteredArray(
			segment => segment.First == p_currentNodeIndex_PF
		).First.Last;
	}
	else
	{ p_attributes_PF = []; }

	# Go to the next node in the path.
	p_currentNodeIndex_PF = p_path_PF.First;
	# Set the position that the player is currently walking towards.
	p_walkingToPosition_PF = p_currentNodeIndex_PF == -1
		? p_destination_PF.DistanceTo(p_savedTarget_PF) <= 4
			? p_destination_PF
			: PositionOf()
		: g_loadedMap_PF.nodes[p_currentNodeIndex_PF];
	PF_UpdateNodeMeta();
}

void PF_UpdateNodeMeta() playervar "【PF Core Subroutine】☞ Update node meta"
{
	if (p_currentNodeIndex_PF != -1)
	{ p_activeNode_PF = p_currentNodeIndex_PF; }

	// Shouldn't be optimised, need to compare directly to the value
	if (p_stuckOnNode_PF == 1)
	{ p_stuckOnNode_PF = ZERO; }

	# Update the pathfinding start time.
	p_startTime_PF = TotalTimeElapsed();
	p_walkingFromPosition_PF = PositionOf();
}

void PF_Recalibrate() playervar "【PF Core Subroutine】☞ Recalibrate"
{
	StopThrottleInDirection();
	p_currentNodeIndex_PF = -1;
	p_savedTarget_PF = null;
	p_isPathfinding_PF = false;
	p_walkingToPosition_PF = PositionOf();
}

void PF_WalkToDestination() playervar "☆【PF Core Subroutine】☞ Walk to destination"
{
	StartThrottleInDirection(
		EventPlayer(),
		PositionOf().DirectionTowards(p_walkingToPosition_PF),
		p_walkingToPosition_PF
			&& (
				p_currentNodeIndex_PF != -1
					|| PositionOf().DistanceTo(p_walkingToPosition_PF) > .4
			),
		Relative.ToWorld,
		ThrottleBehavior.ReplaceExistingThrottle,
		ThrottleRev.DirectionAndMagnitude
	);
}

# Calling this subroutine will make the player look to the point they are walking towards until StopFacing is called.
void PF_LookAtDestination() playervar "☆【PF Core Subroutine】☞ Look at destination"
{
	Vector distanceModifier: (
		PositionOf().DistanceTo(p_walkingToPosition_PF) < 3
			? Vector(1, 0, 1)
			: Vector(1, 1, 1)
	);
	StartFacing(
		EventPlayer(),
		DirectionTowards(
			EyePosition() * distanceModifier,
			(p_walkingToPosition_PF + Up() * 1.5) * distanceModifier
		),
		1000,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

# Selects a node index from a position.
Number ChooseNodeFromPosition(in Vector _vector)
{
	return (
		g_loadedMap_PF.nodes
			.SortedArray(n => n.DistanceTo(_vector))
			.Slice(ZERO, 5)
			.SortedArray(n => !(
				IsInLineOfSight(
					n + Up() * 2,
					_vector + Up() * 2,
					BarrierLOS.NoBarriersBlock
				)
			))
			.First.Y.Abs() * 1000 % 1000
	).Floor();
}

# Gets the shortest path from start to goal.
void AStar()
{
	Number goal = ChooseNodeFromPosition(p_savedTarget_PF);
	PF_Tick();
	if (p_isPathfinding_PF && p_currentNodeIndex_PF != -1)
	{ p_activeNode_PF = p_currentNodeIndex_PF; }
	else
	{
		p_activeNode_PF = ChooseNodeFromPosition(PositionOf());
		PF_Tick();
	}

	Number heuristicWeight: 20;
	const Number => Number h: n => g_loadedMap_PF.nodes[n].DistanceTo(g_loadedMap_PF.nodes[p_activeNode_PF]) * heuristicWeight;

	Node_PF[] scores = [{ parent: -1, gScore: ZERO, fScore: ZERO, nodeIndex: goal }];
	Number[] open = [ZERO];
	Number checkedNode = p_activeNode_PF;

	g_iter = ZERO;
	while (open.Length || g_iter > 30)
	{
		# The index of the current node in `scores`.
		Number current = open.SortedArray((o, i) => scores[o].fScore).First;
		# The index of the current node in `PF_gLoadedMap.nodes`.
		Number currentNodeIndex: scores[current].nodeIndex;

		if (checkedNode != p_activeNode_PF)
		{
			checkedNode = scores.Map(s => s.nodeIndex).IndexOf(p_activeNode_PF);
			if (checkedNode != -1)
			{
				current = checkedNode;
				checkedNode = -2;
			}
			else
			{ checkedNode = p_activeNode_PF; }
		}

		Number currentInExistingPath = p_path_PF.IndexOf(currentNodeIndex);

		# If the goal was found, reconstruct the path.
		if (currentNodeIndex == p_activeNode_PF || checkedNode == -2 || currentInExistingPath != -1)
		{
			ReconstructPath(scores, current, currentInExistingPath);
			return;
		}

		open.ModRemoveByValue(current);

		# Check each neighbor to the current node.
		foreach (Any[] neighbor in g_loadedMap_PF.neighbours[currentNodeIndex])
		{
			// Do not use zero, this is already optimised with FirstOf()
			# The neighbor index to be used like `PF_gLoadedMap.nodes[neighborI]`.
			Number neighborI = neighbor.First;
			Number scoreIndex = scores.Map(s => s.nodeIndex).IndexOf(neighborI);
			Number[] neighborAttributes: <Number[]>neighbor[ONE];
			# Ensure that the path to the neighbor is enabled.
			//if (
			//	neighborAttributes.Length == ZERO
			//	|| neighborAttributes.IsTrueForAny(a => PF_pPlayerAttributes.Contains(a))
			//)
			if (
				neighborAttributes.Length == ZERO
				|| IsTrueForAny(neighborAttributes, p_playerAttributes_PF.Contains(ArrayElement()))
			)
			{
				Number score = scores[current].gScore + g_loadedMap_PF.nodes[currentNodeIndex].DistanceTo(g_loadedMap_PF.nodes[neighborI]);

				# Get neighbor index in scores.
				# If -1, the neighbor was not added to the score list yet.
				if (scoreIndex == -1)
				{
					open += scores.Length;
					scores += {
						parent: current,
						gScore: score,
						fScore: score + h(neighborI),
						nodeIndex: neighborI
					};
				}
				else if (score < scores[scoreIndex].gScore)
				{
					scores[scoreIndex] = {
						parent: current,
						gScore: score,
						fScore: score + h(neighborI),
						nodeIndex: neighborI
					};
					if (!open.Contains(scoreIndex))
					{ open += scoreIndex; }
				}
			}
			PF_Tick();
		}
		g_iter++;
	}
}

void ReconstructPath(in Node_PF[] _scores, ref Number _current, in Number _currentInExistingPath)
{
	if (_currentInExistingPath == -1)
	{ p_path_PF = []; }
	else
	{ p_path_PF = p_path_PF.Slice(ZERO, _currentInExistingPath); }

	while (_current != -1)
	{
		p_path_PF += _scores[_current].nodeIndex;
		_current = _scores[_current].parent;
	}
	p_path_PF += [-1];

	Player[] broadcastTo = PlayersWithinRadius(
		PositionOf() + Up(),
		4,
		Team.All,
		RadiusLOS.Off
	).FilteredArray(p =>
		p != EventPlayer()
		&& p.p_wait_PF
		&& p.p_destination_PF.DistanceTo(p_destination_PF) < 4
		&& p.p_playerAttributes_PF == p_playerAttributes_PF
	);

	broadcastTo.p_path_PF = p_path_PF;
	broadcastTo.p_wasBroadcasted_PF = true;
}

rule: "【Map】Kanezaka (nodes & neighbours)"
if (CurrentMap() == Map.Kanezaka)
{
	// Will need to be split into separate rules when another pass at the map is done.
	g_loadedMap_PF.nodes = import("kanezaka.jsonc").nodes;
	g_loadedMap_PF.neighbours = import("kanezaka.jsonc").neighbors;
}

rule: "【Map】Workshop Island (nodes & neighbours)"
if (CurrentMap() == Map.Workshop_Island)
{
	g_loadedMap_PF.nodes = import("workshop_island.jsonc").nodes;
	g_loadedMap_PF.neighbours = import("workshop_island.jsonc").neighbors;
}

// ----------------------------------

rule: "【Generated】Custom pathfinding rule #1"
Event.OngoingPlayer
if (p_attributes_PF.Contains(ZERO))
{ PressButton(EventPlayer(), Button.Jump); }

rule: "【Generated】Custom pathfinding rule #2"
Event.OngoingPlayer
# Do not optimise, breaks attribute check
if (p_attributes_PF.Contains(1))
{
	PF_LookAtDestination();
	Wait(0.3);
	StopFacing(EventPlayer());
	PressButton(EventPlayer(), Button.Melee);
}

rule: "【Generated】Custom pathfinding rule #3"
Event.OngoingPlayer
Player.Pharah
if (p_attributes_PF.Contains(6))
{ PressButton(EventPlayer(), Button.Ability1); }

rule: "【Generated】Custom pathfinding rule #4"
Event.OngoingPlayer
Player.Pharah
if (p_attributes_PF.Contains(10))
{ PressButton(EventPlayer(), Button.SecondaryFire); }

rule: "【Generated】Custom pathfinding rule #5"
Event.OngoingPlayer
Player.Pharah
if (p_attributes_PF.Contains(20))
{
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(0.8);
	StopHoldingButton(EventPlayer(), Button.Jump);
}
