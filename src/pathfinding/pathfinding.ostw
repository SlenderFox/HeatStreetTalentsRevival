/** Node-based pathfinding system. Moves dummy bots to a target point.
 * Attributes allow custom navigation.
 * Made by Deltin, modified by SlenderFox.
*/

import "../shared.ostw";

struct PF_Map
{
	# The points in the map.
	public Vector[] nodes;
	# `[node][i][0]` = neighbor index,
	# `[node][i][1][j]` = attributes
	public Any[][][] neighbours;
}

struct PF_Node
{
	public Number gScore;
	public Number fScore;
	public Number parent;
	public Number nodeIndex;
}

# The currently loaded map
globalvar PF_Map PF_gLoadedMap;
globalvar Number PF_gIterationsThisTick;
# Current pathfinder execution owner.
globalvar Player PF_gExecOwner;

# The timestamp where a player requests a pathfind.
playervar Number PF_pWait;
# The final pathfinding target.
playervar Vector PF_pDestination;
# The attributes assigned to the player.
playervar Number[] PF_pPlayerAttributes;
# The attributes of a player's current pathfinding edge.
playervar Number[] PF_pAttributes;

# The saved target. If the distance between this and PF_pDestination becomes
# too large, the pathfinding path will be updated.
playervar Vector PF_pSavedTarget;
# Determines if the player is pathfinding.
playervar Boolean PF_pIsPathfinding;
# The current node that the player is walking to.
# If this is -1 but `PF_pIsPathfinding` is true, then the player
# is walking to `PF_pDestination`.
playervar Number PF_pCurrentNodeIndex;
# The position that the player is actively walking towards.
playervar Vector PF_pWalkingToPosition;
# The path that the player will walk along. These are indexes in
# `PF_gLoadedMap.nodes`. A value of `-1` will point to `PF_pDestination`.
playervar Number[] PF_pPath;
# The timestamp when the player reaches a node.
playervar Number PF_pStartTime;
# The position the player was at when they started walking to `PF_pWalkingToPosition`.
playervar Vector PF_pWalkingFromPosition;
# The node closest to the player.
playervar Number PF_pActiveNode;
# This variable is set when a player fails to reaches a node.
playervar Number PF_pStuckOnNode;
# Player received path from another pathfinder.
playervar Boolean PF_pWasBroadcasted;
# Is the player failing to walk?
playervar Boolean PF_pIsStuck;
playervar Number PF_pRollingAvVelocity;

rule: "【PF Core】Prepare loaded map"
{
	WaitUntil(<Boolean>PF_gLoadedMap.nodes, 9999);
	for (gIter = ZERO; PF_gLoadedMap.nodes.Length; ONE)
	{
		PF_gLoadedMap.nodes[gIter] = Vector(
			PF_gLoadedMap.nodes[gIter].X,
			PF_gLoadedMap.nodes[gIter].Y.Floor() + (gIter / 1000) * (PF_gLoadedMap.nodes[gIter].Y < ZERO ? -1 : ONE),
			PF_gLoadedMap.nodes[gIter].Z
		);
	}
}

void PF_Tick() "【PF Core Subroutine】☞ Tick"
{
	PF_gIterationsThisTick--;
	if (PF_gIterationsThisTick <= ZERO)
	{
		MinWait();
		WaitUntil(Max(ServerLoadAverage(), ServerLoad()) < 255, 0.25);
		# This determines the pathfinding budget for the current tick.
		PF_gIterationsThisTick = (
			Max(ServerLoadAverage(), ServerLoad()) < 230
		) + (
			Max(ServerLoadAverage(), ServerLoad()) < 180
		) * 2 + ONE;
	}
}

rule: "【PF Core】Select next pathfinder"
if (!EntityExists(PF_gExecOwner) || PF_gExecOwner == null)
if (
	AllPlayers()
	.Filter(p => IsDummyBot(p))
	.IsTrueForAny(p => p.PF_pWait)
)
{
	PF_gExecOwner = AllPlayers()
		.FilteredArray(p => IsDummyBot(p) && p.PF_pWait)
		.SortedArray(p => p.PF_pWait).First;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Update & Execute"
Event.OngoingPlayer
if (PF_pDestination)
if (IS_DUMMY)
if (EventPlayer().DistanceTo(PF_pDestination) > 1.2)
if (!PF_pSavedTarget || PF_pDestination.DistanceTo(PF_pSavedTarget) > 2.2)
{
	# Ensure that a map is loaded.
	if (!PF_gLoadedMap.nodes)
	{
		LogToInspector(
			<
				"Error: Attempted to pathfind player <0> without a loaded map.",
				EventPlayer()
			>
		);
		return;
	}

	PF_pWait = TotalTimeElapsed();
	PF_pWasBroadcasted = false;
	WaitUntil(PF_gExecOwner == EventPlayer() || PF_pWasBroadcasted, 9999);

	# Update saved destination
	PF_pSavedTarget = PF_pDestination;
	if (!PF_pWasBroadcasted)
	{
		AStar();
		PF_gExecOwner = null;
	}

	if (PF_pPath.Length)
	{
		PF_pIsPathfinding = true;
		PF_pCurrentNodeIndex = PF_pPath.First;
		PF_pWalkingToPosition = PF_gLoadedMap.nodes[PF_pCurrentNodeIndex];
		PF_UpdateNodeMeta();
		PF_WalkToDestination();
	}

	PF_pWait = null;
	Wait(2);
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Node reached"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
if (PF_pWalkingToPosition)
# Horizontal distance to current position is less than 1.
if (
	(PositionOf() * Vector(1, 0, 1))
		.DistanceTo(PF_pWalkingToPosition * Vector(1, 0, 1)) <= 1
)
# Vertical distance to current position is less than 1.
if (PositionOf().Y - PF_pWalkingToPosition.Y~Abs() <= 1)
{
	if (PF_pPath.Length > ZERO && PF_pCurrentNodeIndex != -1)
	{
		PF_ProgressEventPlayer();
		Wait(0.2);
		LoopIfConditionIsTrue();
	}
	# Reached destination
	else
	{
		PF_pDestination = null;
	}
}

rule: "【PF Core】Stop throttle when PF_pDestination is reset"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
if (PF_pDestination == null)
{
	StopThrottleInDirection();
	PF_pIsPathfinding = false;
	PF_pSavedTarget = null;
}

rule: "【PF Core】Insurance"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
if (PF_pWalkingToPosition)
{
	# Recalibrate
	if (
		((PF_pWalkingFromPosition + PF_pWalkingToPosition) / 2)
			.DistanceTo(EventPlayer()) > (
				PF_pWalkingFromPosition.DistanceTo(PF_pWalkingToPosition) + 2
			) * 1.2
	)
	{ PF_Recalibrate(); }
	# Smooth step
	else if (
		PF_pPath.Length == 2
			&& EventPlayer().DistanceTo(PF_pSavedTarget) < PF_pWalkingToPosition.DistanceTo(PF_pSavedTarget)
			&& IsInLineOfSight(PositionOf() + Up() * 0.25, PF_pSavedTarget + Up() * 0.25)
	)
	{ PF_ProgressEventPlayer(); }
	# Recovery
	else if (
		EventPlayer().DistanceTo(PF_pWalkingToPosition) > .25
			&& PF_pIsStuck
				|| PF_pWalkingFromPosition.DistanceTo(PF_pWalkingToPosition) - 5.5 * 0.9 * (TotalTimeElapsed() - PF_pStartTime) < ZERO
			&& !HasStatus(EventPlayer(), Status.Rooted)
			&& !HasStatus(EventPlayer(), Status.Frozen)
			&& !HasStatus(EventPlayer(), Status.Asleep)
			&& !HasStatus(EventPlayer(), Status.KnockedDown)
			&& !HasStatus(EventPlayer(), Status.Stunned)
	)
	{
		if (PF_pCurrentNodeIndex == -1)
		{
			PF_pWalkingToPosition = null;
		}
		else if (PF_pStuckOnNode - 2 == PF_pCurrentNodeIndex)
		{
			LogToInspector(
				<
					"Pathfinder <0> struggled to reach node <1> at <2>. Try adjusting your map in the editor.",
					EventPlayer(),
					PF_pCurrentNodeIndex,
					PF_gLoadedMap.nodes[PF_pCurrentNodeIndex]
				>
			);
			Teleport(EventPlayer(), PF_pWalkingToPosition);
		}
		else
		{
			PF_pStuckOnNode = PF_pCurrentNodeIndex + 2;
			PF_Recalibrate();
		}
	}
	# Shift destination
	else if (
		PF_pWalkingToPosition != PF_pDestination
			&& PF_pCurrentNodeIndex == -1
			&& PF_pSavedTarget.DistanceTo(PF_pDestination) < 5
			&& IsInLineOfSight(PF_pSavedTarget + Up(), PF_pDestination + Up())
	)
	{ PF_pWalkingToPosition = PF_pDestination; }

	Wait(2);
	LoopIfConditionIsTrue();
}

rule: "【PF Core】Rolling average velocity"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
{
	PF_pRollingAvVelocity += VelocityOf().Magnitude;
	PF_pRollingAvVelocity /= 2;
	Wait(0.1);
	LoopIfConditionIsTrue();
	PF_pRollingAvVelocity = 0;
}

rule: "【PF Core】Check throttle"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
if (PF_pRollingAvVelocity < 3)
{
	Wait(2.1, WaitBehavior.AbortWhenFalse);
	PF_pIsStuck = true;
	WaitUntil(
		!PF_pWalkingToPosition
		|| !PF_pIsPathfinding
		|| PF_pRollingAvVelocity >= 3, 9999
	);
	PF_pIsStuck = false;
}

rule: "【PF Additional】Melee and jump if stuck"
Event.OngoingPlayer
if (IS_DUMMY)
if (PF_pIsPathfinding)
if (PF_pIsStuck)
{
	PF_LookAtDestination();
	Wait(0.2);
	PressButton(EventPlayer(), Button.Melee);
	StopFacing();
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	PressButton(EventPlayer(), Button.Jump);
}

void PF_ProgressEventPlayer() playervar "【PF Core Subroutine】☞ Progress event player"
{
	// Remove after debugging
	if (PF_pPath.Length == ZERO)
	{ return; }

	# Pop the current path.
	PF_pPath.ModRemoveByIndex(ZERO);
	# Update the current pathfind attributes.
	if (PF_pPath.Length && PF_pPath.First != -1)
	{
		// Do not use zero, this is already optimised with FirstOf()
		# Any rules watching these with the matching condition will activate.
		PF_pAttributes = PF_gLoadedMap.neighbours[PF_pPath.First].FilteredArray(
			segment => segment.First == PF_pCurrentNodeIndex
		).First.Last;
	}
	else
	{ PF_pAttributes = []; }

	# Go to the next node in the path.
	PF_pCurrentNodeIndex = PF_pPath.First;
	# Set the position that the player is currently walking towards.
	PF_pWalkingToPosition = PF_pCurrentNodeIndex == -1
		? PF_pDestination.DistanceTo(PF_pSavedTarget) <= 4
			? PF_pDestination
			: PositionOf()
		: PF_gLoadedMap.nodes[PF_pCurrentNodeIndex];
	PF_UpdateNodeMeta();
}

void PF_UpdateNodeMeta() playervar "【PF Core Subroutine】☞ Update node meta"
{
	if (PF_pCurrentNodeIndex != -1)
	{ PF_pActiveNode = PF_pCurrentNodeIndex; }

	// Shouldn't be optimised, need to compare directly to the value
	if (PF_pStuckOnNode == 1)
	{ PF_pStuckOnNode = ZERO; }

	# Update the pathfinding start time.
	PF_pStartTime = TotalTimeElapsed();
	PF_pWalkingFromPosition = PositionOf();
}

void PF_Recalibrate() playervar "【PF Core Subroutine】☞ Recalibrate"
{
	StopThrottleInDirection();
	PF_pCurrentNodeIndex = -1;
	PF_pSavedTarget = null;
	PF_pIsPathfinding = false;
	PF_pWalkingToPosition = PositionOf();
}

void PF_WalkToDestination() playervar "☆【PF Core Subroutine】☞ Walk to destination"
{
	StartThrottleInDirection(
		EventPlayer(),
		PositionOf().DirectionTowards(PF_pWalkingToPosition),
		PF_pWalkingToPosition && (PF_pCurrentNodeIndex != -1 || PositionOf().DistanceTo(PF_pWalkingToPosition) > .4),
		Relative.ToWorld,
		ThrottleBehavior.ReplaceExistingThrottle,
		ThrottleRev.DirectionAndMagnitude
	);
}

# Calling this subroutine will make the player look to the point they are walking towards until StopFacing is called.
void PF_LookAtDestination() playervar "☆【PF Core Subroutine】☞ Look at destination"
{
	Vector distanceModifier: (
		PositionOf().DistanceTo(PF_pWalkingToPosition) < 3
			? Vector(1, 0, 1)
			: Vector(1, 1, 1)
	);
	StartFacing(
		EventPlayer(),
		DirectionTowards(
			EyePosition() * distanceModifier,
			(PF_pWalkingToPosition + Up() * 1.5) * distanceModifier
		),
		1000,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

# Selects a node index from a position.
Number ChooseNodeFromPosition(in Vector _vector)
{
	return (
		PF_gLoadedMap.nodes
			.SortedArray(n => n.DistanceTo(_vector))
			.Slice(ZERO, 5)
			.SortedArray(n => !(
				IsInLineOfSight(
					n + Up() * 2,
					_vector + Up() * 2,
					BarrierLOS.NoBarriersBlock
				)
			))
			.First.Y.Abs() * 1000 % 1000
	).Floor();
}

# Gets the shortest path from start to goal.
void AStar()
{
	Number goal = ChooseNodeFromPosition(PF_pSavedTarget);
	PF_Tick();
	if (PF_pIsPathfinding && PF_pCurrentNodeIndex != -1)
	{ PF_pActiveNode = PF_pCurrentNodeIndex; }
	else
	{
		PF_pActiveNode = ChooseNodeFromPosition(PositionOf());
		PF_Tick();
	}

	Number heuristicWeight: 20;
	const Number => Number h: n => PF_gLoadedMap.nodes[n].DistanceTo(PF_gLoadedMap.nodes[PF_pActiveNode]) * heuristicWeight;

	PF_Node[] scores = [{ parent: -1, gScore: ZERO, fScore: ZERO, nodeIndex: goal }];
	Number[] open = [ZERO];
	Number checkedNode = PF_pActiveNode;

	gIter = ZERO;
	while (open.Length || gIter > 30)
	{
		# The index of the current node in `scores`.
		Number current = open.SortedArray((o, i) => scores[o].fScore).First;
		# The index of the current node in `PF_gLoadedMap.nodes`.
		Number currentNodeIndex: scores[current].nodeIndex;

		if (checkedNode != PF_pActiveNode)
		{
			checkedNode = scores.Map(s => s.nodeIndex).IndexOf(PF_pActiveNode);
			if (checkedNode != -1)
			{
				current = checkedNode;
				checkedNode = -2;
			}
			else
			{ checkedNode = PF_pActiveNode; }
		}

		Number currentInExistingPath = PF_pPath.IndexOf(currentNodeIndex);

		# If the goal was found, reconstruct the path.
		if (currentNodeIndex == PF_pActiveNode || checkedNode == -2 || currentInExistingPath != -1)
		{
			ReconstructPath(scores, current, currentInExistingPath);
			return;
		}

		open.ModRemoveByValue(current);

		# Check each neighbor to the current node.
		foreach (Any[] neighbor in PF_gLoadedMap.neighbours[currentNodeIndex])
		{
			// Do not use zero, this is already optimised with FirstOf()
			# The neighbor index to be used like `PF_gLoadedMap.nodes[neighborI]`.
			Number neighborI = neighbor.First;
			Number scoreIndex = scores.Map(s => s.nodeIndex).IndexOf(neighborI);
			Number[] neighborAttributes: <Number[]>neighbor[ONE];
			# Ensure that the path to the neighbor is enabled.
			//if (
			//	neighborAttributes.Length == ZERO
			//	|| neighborAttributes.IsTrueForAny(a => PF_pPlayerAttributes.Contains(a))
			//)
			if (
				neighborAttributes.Length == ZERO
				|| IsTrueForAny(neighborAttributes, PF_pPlayerAttributes.Contains(ArrayElement()))
			)
			{
				Number score = scores[current].gScore + PF_gLoadedMap.nodes[currentNodeIndex].DistanceTo(PF_gLoadedMap.nodes[neighborI]);

				# Get neighbor index in scores.
				# If -1, the neighbor was not added to the score list yet.
				if (scoreIndex == -1)
				{
					open += scores.Length;
					scores += {
						parent: current,
						gScore: score,
						fScore: score + h(neighborI),
						nodeIndex: neighborI
					};
				}
				else if (score < scores[scoreIndex].gScore)
				{
					scores[scoreIndex] = {
						parent: current,
						gScore: score,
						fScore: score + h(neighborI),
						nodeIndex: neighborI
					};
					if (!open.Contains(scoreIndex))
					{ open += scoreIndex; }
				}
			}
			PF_Tick();
		}
		gIter++;
	}
}

void ReconstructPath(in PF_Node[] _scores, ref Number _current, in Number _currentInExistingPath)
{
	if (_currentInExistingPath == -1)
	{ PF_pPath = []; }
	else
	{ PF_pPath = PF_pPath.Slice(ZERO, _currentInExistingPath); }

	while (_current != -1)
	{
		PF_pPath += _scores[_current].nodeIndex;
		_current = _scores[_current].parent;
	}
	PF_pPath += [-1];

	Player[] broadcastTo = PlayersWithinRadius(
		PositionOf() + Up(),
		4,
		Team.All,
		RadiusLOS.Off
	).FilteredArray(p =>
		p != EventPlayer()
		&& p.PF_pWait
		&& p.PF_pDestination.DistanceTo(PF_pDestination) < 4
		&& p.PF_pPlayerAttributes == PF_pPlayerAttributes
	);

	broadcastTo.PF_pPath = PF_pPath;
	broadcastTo.PF_pWasBroadcasted = true;
}

rule: "【Map】Kanezaka (nodes & neighbours)"
if (CurrentMap() == Map.Kanezaka)
{
	// Will need to be split into separate rules when another pass at the map is done.
	PF_gLoadedMap.nodes = import("kanezaka.jsonc").nodes;
	PF_gLoadedMap.neighbours = import("kanezaka.jsonc").neighbors;
}

rule: "【Map】Workshop Island (nodes & neighbours)"
if (CurrentMap() == Map.Workshop_Island)
{
	PF_gLoadedMap.nodes = import("workshop_island.jsonc").nodes;
	PF_gLoadedMap.neighbours = import("workshop_island.jsonc").neighbors;
}

// ----------------------------------

rule: "【Generated】Custom pathfinding rule #1"
Event.OngoingPlayer
if (PF_pAttributes.Contains(ZERO))
{
	PressButton(EventPlayer(), Button.Jump);
}

rule: "【Generated】Custom pathfinding rule #2"
Event.OngoingPlayer
# Do not optimise, breaks attribute check
if (PF_pAttributes.Contains(1))
{
	PF_LookAtDestination();
	Wait(0.3);
	StopFacing(EventPlayer());
	PressButton(EventPlayer(), Button.Melee);
}

rule: "【Generated】Custom pathfinding rule #3"
Event.OngoingPlayer
Player.Pharah
if (PF_pAttributes.Contains(6))
{
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "【Generated】Custom pathfinding rule #4"
Event.OngoingPlayer
Player.Pharah
if (PF_pAttributes.Contains(10))
{
	PressButton(EventPlayer(), Button.SecondaryFire);
}

rule: "【Generated】Custom pathfinding rule #5"
Event.OngoingPlayer
Player.Pharah
if (PF_pAttributes.Contains(20))
{
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(0.8);
	StopHoldingButton(EventPlayer(), Button.Jump);
}
