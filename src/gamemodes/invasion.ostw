/** Invasion gamemode has a portal spawning enemy units that needs to be destroyed.
 * On destruction a boss enemy spawns.
 * The boss can use the same dummy as the portal.
*/

import "../bots.ostw";
import "../gamestate.ostw";

// Mark one bot as the portal.
// Select a position to place the portal in.
// Damage phases.
// Spawn boss at the end, reuse dummy.
// Health bar HUD element.
// Portal effects.

globalvar Vector gPortalPosition = Vector(-6, 0.5, 6);

# Global reference to the portal boss
globalvar Player gIVBoss;

rule: "[INVASION] Initialise gamemode"
if (gGamemode == HS_Gamemode.Invasion)
{
	// TODO remove debug check (pIsTestBot)
	gIVBoss = AllPlayers(Team.Team2)
		.Filter(p => p.IsDummy() && !p.pIsTestBot)
		.Sort(p => SlotOf(p)).First;
	gIVBoss.pIsBoss = true;
	StartForcingDummyBotName(gIVBoss, "Invasion Boss");
}

rule: "[INVASION] Setup portal when gamestate changes to inprogress"
Event.OngoingPlayer
Team.Team2
if (gGamemode == HS_Gamemode.Invasion)
//> If the portal bot is reused as the end of round boss, then this will cause issues.
if (gGameState == GameState.Inprogress)
if (EventPlayer().pIsBoss)
{
	# Need to set all the bot settings here every round
	//> Reconsider this, should players be able to stand on the portal?
	DisableMovementCollisionWithPlayers(EventPlayer());
	SetMoveSpeed(EventPlayer(), ZERO);
	SetGravity(EventPlayer(), ZERO);
	SetKnockbackReceived(EventPlayer(), ZERO);
	SetJumpEnabled(EventPlayer(), false);
	SetCrouchEnabled(EventPlayer(), false);
	SetMeleeEnabled(EventPlayer(), false);
	SetPrimaryFireEnabled(EventPlayer(), false);
	SetSecondaryFireEnabled(EventPlayer(), false);
	// Possibly do something with adaptive shields?
	//SetAbility2Enabled(EventPlayer(), false);
	// Possibly do something with mines?
	//SetUltimateAbilityEnabled(EventPlayer(), false);

	# Lock the bot at the portal location, works for everything except charge
	StartForcingPlayerPosition(EventPlayer(), gPortalPosition, false);
	# Necessary delay
	Wait(0.033);
	# Start forcing the hero since it will have been different in the previous round
	ForcePlayerHero(EventPlayer(), Hero.WreckingBall);
}

rule: "[INVASION] Make sure wrecking ball portal stays in ball form"
Event.OngoingPlayer
Team.Team2
Player.WreckingBall
if (gGamemode == HS_Gamemode.Invasion)
if (EventPlayer().pIsBoss)
if (EventPlayer().IsAlive())
if (IsInAlternateForm(EventPlayer()) == false)
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(0.5);
	LoopIfConditionIsTrue();
}

rule: "[INVASION] Make portal immune to sleep"
Event.OnDamageTaken
Team.Team2
Player.WreckingBall
if (gGamemode == HS_Gamemode.Invasion)
if (EventPlayer().pIsBoss)
if (Attacker().Hero() == Hero.Ana)
if (EventAbility() == Button.Ability1)
{ SetStatus(EventPlayer(), null, Status.PhasedOut, 0.016); }

rule: "[INVASION] Make portal immediately recover from knockdown"
Event.OngoingPlayer
Team.Team2
Player.WreckingBall
if (gGamemode == HS_Gamemode.Invasion)
if (EventPlayer().pIsBoss)
if (HasStatus(EventPlayer(), Status.KnockedDown))
{ ClearStatus(EventPlayer(), Status.KnockedDown); }

// This is generalised to all bosses
rule: "[INVASION] Prevent Reinhardt from pinning the boss"
Event.PlayerDealtKnockback
Team.Team1
Player.Reinhardt
if (Victim().pIsBoss)
# This somehow registers as the pin connecting
if (EventAbility() == null)
{
	Damage(Victim(), EventPlayer(), 100);
	CancelPrimaryAction(EventPlayer());
	SetStatus(EventPlayer(), Victim(), Status.KnockedDown, 1.2);
}

// This is generalised to all bosses
rule: "[INVASION] Make roadhog pull himself towards the boss"
Event.OnDamageDealt
Team.Team1
Player.Roadhog
if (Victim().pIsBoss)
if (EventAbility() == Button.Ability1)
{
	Wait(0.4);
	AbortIf(
		!IsInLineOfSight(
			Victim(),
			EventPlayer(),
			BarrierLOS.EnemyBarriersBlock
		)
	);
	ApplyImpulse(
		EventPlayer(),
		DirectionTowards(EventPlayer(), Victim()),
		(DistanceBetween(EventPlayer(), Victim()) - 3.2) * 4.5,
		Relative.ToWorld,
		ContraryMotion.Cancel
	);
}
