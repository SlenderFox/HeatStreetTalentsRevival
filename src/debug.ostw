/** Contains many rules to help development of the gamemode.
 * Should not be included in a release build of the mode.
*/

import "pathfinding/pathfinding.ostw";
import "bots.ostw";
import "noclip.ostw";

globalvar Player g_enemyTestBot;
playervar Boolean p_inControlMode;

Player HOST: HostPlayer();
Boolean IS_HOST: EventPlayer() == HOST;
Vector HOST_POS: HOST.Position();
Vector HOST_EYE: HOST.EyePosition();
Vector HOST_FACING: HOST.FacingDirection();
Vector HOST_TARGET: RayCastHitPosition(HOST_EYE, HOST_EYE + HOST_FACING * 100, null, null, false);

Boolean BUTTON(Button _button): HOST.IsButtonHeld(_button);

Boolean BUTTON_CONTROL: BUTTON(Button.Crouch);
Boolean BUTTON_NOCLIP: BUTTON(Button.Interact);
Boolean BUTTON_FRIENDLY: BUTTON(Button.Ultimate);
Boolean BUTTON_ENEMY: BUTTON(Button.Ability2);
Boolean BUTTON_REVIVE: BUTTON(Button.Reload);
Boolean BUTTON_SHOOT: BUTTON(Button.PrimaryFire);
//Boolean BUTTON_FACING: BUTTON(Button.SecondaryFire);

void SendToHost(in String _message)
{ SmallMessage(HOST, " " + _message); }

void SelectTestBot() "[DEBUG SUBROUTINE] Select test bot"
{
	if (g_enemyTestBot == null || g_enemyTestBot.p_isBoss)
	{
		g_enemyTestBot = AllPlayers(Team.Team2)
			.Filter(p => p.IsDummy() && !p.p_isBoss)
			.Sort(p => SlotOf(p)).First;
		StartForcingDummyBotName(g_enemyTestBot, "<<TEST BOT>>");
	}
}

rule: "[DEBUG] Display debug information on top left"
{
	Number loadScaler: 0.3921;
	CreateHudText(
		HOST,
		Text: <
			"load: c:<0>% a:<1>% p:<2>%\nposition: <3>\n<4>\n<5>\n                  ",
			ServerLoad() * loadScaler,
			ServerLoadAverage() * loadScaler,
			ServerLoadPeak() * loadScaler,
			HOST_POS,
			<
				"<0> (<1>): <2> vs <3>",
				GAMESTATE_STRING,
				g_currentRound,
				NumberOfPlayers(Team.Team1),
				NumberOfPlayers(Team.Team2)
			>,
			HOST.p_inControlMode
				? HOST.p_isNoclipping
					? "control mode: noclipping"
					: "control mode"
				: @""
		>,
		Location: Location.Right
	);
}

rule: "[DEBUG] Bot information display"
Event.OngoingPlayer
if (IS_DUMMY)
{
	CreateInWorldText(
		HOST,
		<
			"Slot: <0> Boss: <1><2><3><4><5><6>",
			SlotOf(),
			p_isBoss ? "true" : "false",
			p_target ? <"\nTarget: <0>", p_target> : @"",
			p_following ? <"\nFollowing: <0>", p_following> : @"",
			p_isPathfinding_PF
				? <
					"\nPathing (<0>|<1>)<2>",
					VelocityOf().Magnitude,
					p_rollingAvVelocity_PF,
					p_isStuck_PF ? ": Stuck" : @""
				>
				: @"",
			p_destination_PF ? <"\nDestination: <0>", p_destination_PF> : @"",
			p_isPathfinding_PF ? <"\nWalking to: <0>", p_walkingToPosition_PF> : @""
		>,
		EyePosition() + Vector(0, 1, 0),
		ONE,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToPositionAndString
	);

	CreateBeamEffect(
		p_isPathfinding_PF ? HOST : [],
		BeamType.OrisaHaltTendrilBeam,
		p_destination_PF,
		EyePosition(),
		Team.Team1,
		EffectRev.VisibleToPositionAndRadius
	);
}

//------ MANUAL RULES ------

rule: "[DEBUG] Toggle control mode"
Event.OngoingPlayer
if (IS_HOST)
if (BUTTON_CONTROL)
if (BUTTON_NOCLIP)
{
	p_inControlMode = true;
	DisallowButton(HOST, Button.PrimaryFire);
	DisallowButton(HOST, Button.SecondaryFire);
	DisallowButton(HOST, Button.Melee);
	DisallowButton(HOST, Button.Ability1);
	DisallowButton(HOST, Button.Ability2);
	DisallowButton(HOST, Button.Ultimate);
	DisallowButton(HOST, Button.Interact);
	Wait(0.3);
	WaitUntil(BUTTON_NOCLIP && BUTTON_CONTROL, 9999);
	p_inControlMode = false;
	p_isNoclipping = false;
	AllowButton(HOST, Button.PrimaryFire);
	AllowButton(HOST, Button.SecondaryFire);
	AllowButton(HOST, Button.Melee);
	AllowButton(HOST, Button.Ability1);
	AllowButton(HOST, Button.Ability2);
	AllowButton(HOST, Button.Ultimate);
	AllowButton(HOST, Button.Interact);
}

rule: "[DEBUG] Toggle noclip"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_NOCLIP)
{ p_isNoclipping = !p_isNoclipping; }

rule: "[DEBUG] Teleport enemy dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL)
if (BUTTON_ENEMY)
{
	SelectTestBot();

	if (!g_enemyTestBot.IsAlive())
	{
		Respawn(g_enemyTestBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(g_enemyTestBot, Left(), Relative.ToWorld);
	}

	Teleport(g_enemyTestBot, HOST_TARGET);
}

rule: "[DEBUG] Teleport friendly dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL)
if (BUTTON_FRIENDLY)
if (g_friendlyBot)
{
	if (!g_friendlyBot.IsAlive())
	{
		Respawn(g_friendlyBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(g_friendlyBot, Left(), Relative.ToWorld);
	}

	Teleport(g_friendlyBot, HOST_TARGET);
}

rule: "[DEBUG] Force enemy dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_ENEMY)
{ g_enemyTestBot.p_destination_PF = HOST_TARGET; }

rule: "[DEBUG] Force friendly dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_FRIENDLY)
{ g_friendlyBot.p_destination_PF = HOST_TARGET; }

//rule: "[DEBUG] Toggle enemy dummy facing"
//Event.OngoingPlayer
//if (IS_HOST)
//if (pInControlMode)
//if (BUTTON_CONTROL == false)
//if (BUTTON_FACING)
//{
//	SelectTestBot();

//	if (gEnemyTestBot.pTarget != null)
//	{
//		gEnemyTestBot.pTarget = null;
//		StopFacing(gEnemyTestBot);
//		# Reset facing direction to +X
//		SetFacing(gEnemyTestBot, Left(), Relative.ToWorld);
//	}
//	else
//	{
//		gEnemyTestBot.pTarget = gFriendlyBot;
//	}
//}

rule: "[DEBUG] Make enemy dummy shoot"
Event.OngoingPlayer
if (IS_HOST)
if (p_inControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_SHOOT)
{
	StartHoldingButton(g_enemyTestBot, Button.PrimaryFire);
	WaitUntil(!(BUTTON(Button.PrimaryFire) && p_inControlMode), 120);
	StopHoldingButton(g_enemyTestBot, Button.PrimaryFire);
}

//rule: "[DEBUG] Toggle friendly dummy follow"
//Event.OngoingPlayer
//if (IS_HOST)
//if (pInControlMode)
//if (BUTTON_CONTROL)
//if (BUTTON_FACING)
//{
//	if (gFriendlyBot.pFollowing != null)
//	{
//		gFriendlyBot.pFollowing = null;
//	}
//	else
//	{
//		gFriendlyBot.pFollowing = HOST;
//	}
//}

rule: "[DEBUG] Manually revive host"
Event.OngoingPlayer
Team.Team1
if (IS_HOST)
if (p_inControlMode)
if (HOST.p_downedStartTime)
if (BUTTON_REVIVE)
{
	EnablePlayer();
	RevivePlayer(HOST);
}
