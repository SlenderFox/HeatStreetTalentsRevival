/** Contains many rules to help development of the gamemode.
 * Should not be included in a release build of the mode.
*/

import "pathfinding/pathfinding.ostw";
import "bots.ostw";
import "noclip.ostw";

globalvar Player gEnemyTestBot;
playervar Boolean pInControlMode;
playervar Boolean pIsTestBot;

Player HOST: HostPlayer();
Boolean IS_HOST: EventPlayer() == HOST;
Vector HOST_POS: HOST.Position();
Vector HOST_EYE: HOST.EyePosition();
Vector HOST_FACING: HOST.FacingDirection();
Vector HOST_TARGET: RayCastHitPosition(HOST_EYE, HOST_EYE + HOST_FACING * 100, null, null, false);

Boolean BUTTON(Button _button): HOST.IsButtonHeld(_button);

Boolean BUTTON_CONTROL: BUTTON(Button.Crouch);
Boolean BUTTON_NOCLIP: BUTTON(Button.Interact);
Boolean BUTTON_FRIENDLY: BUTTON(Button.Ultimate);
Boolean BUTTON_ENEMY: BUTTON(Button.Ability2);
Boolean BUTTON_REVIVE: BUTTON(Button.Reload);
Boolean BUTTON_SHOOT: BUTTON(Button.PrimaryFire);
Boolean BUTTON_FACING: BUTTON(Button.SecondaryFire);

void SelectTestBot() "[DEBUG SUBROUTINE] Select test bot"
{
	if (gEnemyTestBot == null)
	{
		gEnemyTestBot = AllPlayers(Team.Team2)
			.Filter(p => p.IsDummy() && !p.pIsBoss)
			.Sort(p => SlotOf(p)).First;
		gEnemyTestBot.pIsTestBot = true;
		StartForcingDummyBotName(gEnemyTestBot, "<<TEST BOT>>");
	}
}

rule: "[DEBUG] Display debug information on top left"
{
	Number loadScaler: 0.3921;
	CreateHudText(
		HOST,
		Text: <
			"load: c:<0>% a:<1>% p:<2>%\nposition: <3>\n<4>\n<5>\n                  ",
			ServerLoad() * loadScaler,
			ServerLoadAverage() * loadScaler,
			ServerLoadPeak() * loadScaler,
			HOST_POS,
			<
				"<0> (<1>): <2> vs <3>",
				GAMESTATE_STRING,
				gCurrentRound,
				NumberOfPlayers(Team.Team1),
				NumberOfPlayers(Team.Team2)
			>,
			HOST.pInControlMode
				? HOST.pIsNoclipping
					? "control mode: noclipping"
					: "control mode"
				: ""
		>,
		Location: Location.Right
	);
}

rule: "[DEBUG] Bot information display"
Event.OngoingPlayer
if (IS_DUMMY)
if (
	EventPlayer() == gFriendlyBot
	|| EventPlayer() == gEnemyTestBot
)
{
	CreateInWorldText(
		HOST,
		<
			"Targeting: <0>\nFollowing: <1>\nDestination: <2><3><4>",
			EventPlayer().pTarget,
			EventPlayer().pFollowing,
			EventPlayer().PF_pDestination,
			EventPlayer().PF_pIsPathfinding
				? <
					"\nPathing\nWalkingTo: <0>",
					EventPlayer().PF_pWalkingToPosition
				>
				: "",
			EventPlayer().pDownedStartTime ? "\nDowned" : ""
		>,
		EventPlayer().EyePosition() + Vector(0, 1, 0),
		ONE,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToPositionAndString
	);

	CreateBeamEffect(
		EventPlayer().PF_pIsPathfinding ? HOST : [],
		BeamType.OrisaHaltTendrilBeam,
		EventPlayer().PF_pDestination,
		EventPlayer().EyePosition(),
		Team.Team1,
		EffectRev.VisibleToPositionAndRadius
	);
}

//------ MANUAL RULES ------

rule: "[DEBUG] Toggle control mode"
Event.OngoingPlayer
if (IS_HOST)
if (BUTTON_CONTROL)
if (BUTTON_NOCLIP)
{
	pInControlMode = true;
	DisallowButton(HOST, Button.PrimaryFire);
	DisallowButton(HOST, Button.SecondaryFire);
	DisallowButton(HOST, Button.Melee);
	DisallowButton(HOST, Button.Ability1);
	DisallowButton(HOST, Button.Ability2);
	DisallowButton(HOST, Button.Ultimate);
	DisallowButton(HOST, Button.Interact);
	Wait(0.3);
	WaitUntil(BUTTON_NOCLIP && BUTTON_CONTROL, 9999);
	pInControlMode = false;
	pIsNoclipping = false;
	AllowButton(HOST, Button.PrimaryFire);
	AllowButton(HOST, Button.SecondaryFire);
	AllowButton(HOST, Button.Melee);
	AllowButton(HOST, Button.Ability1);
	AllowButton(HOST, Button.Ability2);
	AllowButton(HOST, Button.Ultimate);
	AllowButton(HOST, Button.Interact);
}

rule: "[DEBUG] Toggle noclip"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_NOCLIP)
{
	pIsNoclipping = !pIsNoclipping;
}

rule: "[DEBUG] Teleport enemy dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_ENEMY)
{
	SelectTestBot();

	if (!gEnemyTestBot.IsAlive())
	{
		Respawn(gEnemyTestBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(gEnemyTestBot, Left(), Relative.ToWorld);
	}

	Teleport(gEnemyTestBot, HOST_TARGET);
}

rule: "[DEBUG] Teleport friendly dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_FRIENDLY)
if (gFriendlyBot)
{
	if (!gFriendlyBot.IsAlive())
	{
		Respawn(gFriendlyBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(gFriendlyBot, Left(), Relative.ToWorld);
	}

	Teleport(gFriendlyBot, HOST_TARGET);
}

rule: "[DEBUG] Enemy dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL)
if (BUTTON_ENEMY)
{
	gEnemyTestBot.PF_pDestination = HOST_TARGET;
}

rule: "[DEBUG] Friendly dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL)
if (BUTTON_FRIENDLY)
{
	gFriendlyBot.PF_pDestination = HOST_TARGET;
}

rule: "[DEBUG] Toggle enemy dummy facing"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_FACING)
{
	SelectTestBot();

	if (gEnemyTestBot.pTarget != null)
	{
		gEnemyTestBot.pTarget = null;
		StopFacing(gEnemyTestBot);
		# Reset facing direction to +X
		SetFacing(gEnemyTestBot, Left(), Relative.ToWorld);
	}
	else
	{
		gEnemyTestBot.pTarget = gFriendlyBot;
	}
}

rule: "[DEBUG] Make enemy dummy shoot"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL == false)
if (BUTTON_SHOOT)
{
	StartHoldingButton(gEnemyTestBot, Button.PrimaryFire);
	WaitUntil(!(BUTTON(Button.PrimaryFire) && pInControlMode), 120);
	StopHoldingButton(gEnemyTestBot, Button.PrimaryFire);
}

rule: "[DEBUG] Toggle friendly dummy follow"
Event.OngoingPlayer
if (IS_HOST)
if (pInControlMode)
if (BUTTON_CONTROL)
if (BUTTON_FACING)
{
	if (gFriendlyBot.pFollowing != null)
	{
		gFriendlyBot.pFollowing = null;
	}
	else
	{
		gFriendlyBot.pFollowing = HOST;
	}
}

rule: "[DEBUG] Manually revive host"
Event.OngoingPlayer
Team.Team1
if (IS_HOST)
if (pInControlMode)
if (HOST.pDownedStartTime)
if (BUTTON_REVIVE)
{
	EnablePlayer();
	RevivePlayer(HOST);
}
