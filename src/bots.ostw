/** Enemy bot management and ai. (Could split)
*/

import "pathfinding/pathfinding.ostw";

// Spawning bots is done from the perspective of the bot, it see how many bots are expected and spawns itself.
// Spawning of bots should be primarily handled by the gamemode.
// Could use the slot of the bot for addressing.

// I can have 19 dummy bots in total.
// I have 15 max unique skins with 5 reserved for players for a total of 10 for dummies.

enum BotType_HS
{
	Normal,
	Boss,
	Portal
}

String BOTTYPE_STRING: ["Normal", "Boss", "Portal"][p_botType];

// One less than limit so there is room for friendlybot
Number MAX_BOTS: 18;
Number UNIQUE_BOTS: 10;
Number FOLLOWING_DISTANCE: 8;

globalvar Player g_lonePlayer;
globalvar Player g_friendlyBot;
globalvar Number g_botCount;
# Gamemodes can reserve a number bots to be used for special cases, these bots will not be used for cannonfodder spawning
globalvar Number g_reserved;

playervar Player p_target;
playervar Player p_following;
playervar BotType_HS p_botType;

//> Should I do it this way? Maybe it's better to create them once the round starts.
rule: "[BOTS] Create the enemy dummy bots" -10
if (CountOf(AllPlayers(Team.Team2)) < MAX_BOTS)
{
	CreateDummyBot(
		Hero.Soldier76,
		Team.Team2,
		-1,
		Vector(0, -1000, 0),
		null
	).p_playerAttributes_PF = [ZERO, ONE, 6, 10, 20];
	StartForcingDummyBotName(LastCreatedEntity(), "Dummy Bot");
	LoopIfConditionIsTrue();
}

//> Eventually, upgrade this to intelligently select a target.
// Currently just pick the closest.
rule: "[BOTS] Target acquisition"
Event.OngoingPlayer
if (IS_DUMMY)
if (IsAlive())
if (p_botType != BotType_HS.Portal)
{
	p_target = AllLivingPlayers(
		OppositeTeamOf(EventPlayer().Team())
	).Filter(p =>
		!p.p_downedStartTime
			&& IsInLineOfSight(EyePosition(), p.EyePosition(), BarrierLOS.NoBarriersBlock)
	).Sort(p =>
		DistanceBetween(EyePosition(), p.EyePosition())
	).First;
	Wait(2);
	LoopIfConditionIsTrue();
}

rule: "[BOTS] Start facing target"
Event.OngoingPlayer
if (IS_DUMMY)
if (IsAlive())
if (p_target != null)
{
	StartFacing(
		EventPlayer(),
		DirectionTowards(EyePosition(), p_target.EyePosition()),
		500,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

rule: "[BOTS] Stop targeting player once LOS is broken"
Event.OngoingPlayer
if (IS_DUMMY)
if (IsAlive())
if (p_target != null)
if (
	IsInLineOfSight(
		EyePosition(),
		p_target.EyePosition(),
		BarrierLOS.NoBarriersBlock
	) == false
)
{
	StopFacing();
	p_target = null;
}

rule: "[BOTS] Friendly bot following"
Event.OngoingPlayer
Team.Team1
# if (IS_DUMMY) Dummy is implied
if (EventPlayer() == g_friendlyBot)
if (p_following != null)
# Either horizontal distance is too far, or vertical distance is too far while not airborne
if (
	DistanceBetween(
		PositionOf() * Vector(1, 0, 1),
		p_following.Position() * Vector(1, 0, 1)
	) > FOLLOWING_DISTANCE
	|| !p_following.IsInAir()
		&& DistanceBetween(
			PositionOf() * Vector(0, 1, 0),
			p_following.Position() * Vector(0, 1, 0)
		) > 3
)
{
	# Pause updates if server is being overloaded
	WaitUntil(ServerLoadAverage() < 230, 999);
	# Set the destination as the ground under the player.
	p_destination_PF = NearestWalkablePosition(p_following);
	# Avoid spamming destination updates
	Wait(ONE);
	LoopIfConditionIsTrue();
}

rule: "[BOTS] Removing target and follow when dead"
Event.OnDeath
if (IS_DUMMY)
{
	p_target = null;
	if (TeamOf() == Team.Team2)
	{ p_following = null; }
}

//------ FRIENDLY BOT RULES ------

rule: "[BOTS] Create friendly bot if there is only one player in the match"
# Cannot be optimised, need to match to exactly 1
if (NumberOfPlayers(Team.Team1) == 1)
{
	# Create friendly bot
	g_friendlyBot = CreateDummyBot(
		g_friendlyBotHero,
		Team.Team1,
		6,
		NearestWalkablePosition(Vector(0, 0, 0)),
		null
	);
	g_friendlyBot.p_playerAttributes_PF = [ZERO, ONE];
	g_lonePlayer = AllPlayers(Team.Team1).Filter(p => !p.IsDummy()).First;
	g_friendlyBot.p_following = g_lonePlayer;
	//StartForcingDummyBotName(gFriendlyBot, "Puipui");
	WaitUntil(NumberOfPlayers(Team.Team1) > 2, 9999);
	DestroyDummyBot(g_friendlyBot);
	g_lonePlayer = null;
}

rule: "[BOTS] Friendly bot force revive player"
Event.OngoingPlayer
Team.Team1
# if (IS_DUMMY) Dummy is implied
if (EventPlayer() == g_friendlyBot)
if (g_lonePlayer.p_downedStartTime)
{
	while (g_lonePlayer.p_downedStartTime)
	{
		# Continuously update the destination every second to make sure the bot stays in the revive circle
		g_friendlyBot.p_destination_PF = g_lonePlayer.Position();
		Wait(ONE);
	}
}
