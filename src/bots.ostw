/** Enemy bot management and ai. (Could split)
*/

import "pathfinding/pathfinding.ostw";

// Spawning bots is done from the perspective of the bot, it see how many bots are expected and spawns itself.
// Spawning of bots should be primarily handled by the gamemode.
// Could use the slot of the bot for addressing.

// I can have 19 dummy bots in total.
// I have 15 max unique skins with 5 reserved for players for a total of 10 for dummies.

// Should the friendly bot be defined and managed here?
globalvar Player gFriendlyBot;
globalvar Number gBotQuota;
playervar Player pTarget;
playervar Player pFollowing;
playervar Boolean pIsBoss;

rule: "[BOTS] Create the enemy dummy bots" -10
{
	# Create enemy bots
	for (gIter = ZERO; gIter < 17; gIter++)
	{
		CreateDummyBot(
			Hero.Soldier76,
			Team.Team2,
			-1,
			Vector(0, -1000, 0),
			null
		).PF_pPlayerAttributes = [ZERO, ONE, 6, 10, 20];
		StartForcingDummyBotName(LastCreatedEntity(), "Dummy Bot");
	}
}

rule: "[BOTS] Create friendly bot if there is only one player in the match"
# Cannot be optimised, need to match to exactly 1
if (NumberOfPlayers(Team.Team1) == 1)
{
	# Create friendly bot
	gFriendlyBot = CreateDummyBot(
		gFriendlyBotHero,
		Team.Team1,
		6,
		NearestWalkablePosition(Vector(0, 0, 0)),
		null
	);
	gFriendlyBot.PF_pPlayerAttributes = [ZERO, ONE];
	//StartForcingDummyBotName(gFriendlyBot, "Puipui");
	WaitUntil(NumberOfPlayers(Team.Team1) > 2, 9999);
	DestroyDummyBot(gFriendlyBot);
}

rule: "[BOTS] Following"
Event.OngoingPlayer
if (IS_DUMMY)
if (pFollowing != null)
# Horizontal distance to following position is more than 8 or vertical is more than 5 while not airborne
if (
	(
		PositionOf() * Vector(1, 0, 1)
	).DistanceTo(
		pFollowing.Position() * Vector(1, 0, 1)
	) > 8
	|| (
		(
			PositionOf() * Vector(0, 1, 0)
		).DistanceTo(
			pFollowing.Position() * Vector(0, 1, 0)
		) > 3
		&& !pFollowing.IsInAir()
	)
)
{
	# Pause updates if server is being overloaded
	WaitUntil(ServerLoadAverage() < 230, 999);
	# Set the destination as the ground under the player.
	PF_pDestination = NearestWalkablePosition(pFollowing);
	# Avoid spamming destination updates
	Wait(ONE);
	LoopIfConditionIsTrue();
}

rule: "[BOTS] Start facing target"
Event.OngoingPlayer
if (IS_DUMMY)
if (pTarget != null)
{
	StartFacing(
		EventPlayer(),
		DirectionTowards(EyePosition(), pTarget.EyePosition()),
		500,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

rule: "[BOTS] Stop targeting player once LOS is broken"
Event.OngoingPlayer
if (IS_DUMMY)
if (pTarget != null)
if (
	IsInLineOfSight(
		EyePosition(),
		pTarget.EyePosition(),
		BarrierLOS.NoBarriersBlock
	) == false
)
{
	StopFacing();
	pTarget = null;
}

# This requires that there only be one person on the team beside the dummy.
Player Human_Player()
{ return AllPlayers(Team.Team1).Filter(p => !p.IsDummy()).First; }

rule: "[BOTS] Friendly bot force revive player"
Event.OngoingPlayer
if (IS_DUMMY)
if (EventPlayer() == gFriendlyBot)
if (Human_Player().pDownedStartTime)
{
	while (Human_Player().pDownedStartTime)
	{
		# Continuously update the destination every second to make sure the bot stays in the revive circle
		gFriendlyBot.PF_pDestination = Human_Player().Position();
		Wait(ONE);
	}
}
